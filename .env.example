# ==================================================================================
# AI TRADING BOT - COMPREHENSIVE ENVIRONMENT CONFIGURATION
# ==================================================================================
# Copy this file to .env and configure your settings for Bluefin DEX trading
# Use this as your complete reference for all environment variables
#
# ⚠️ ⚠️ ⚠️ SECURITY WARNING ⚠️ ⚠️ ⚠️
# THIS FILE CONTAINS PLACEHOLDERS ONLY - NOT REAL KEYS!
# ALL VALUES LIKE "YOUR_API_KEY_HERE" MUST BE REPLACED WITH ACTUAL KEYS
# NEVER COMMIT REAL API KEYS OR PRIVATE KEYS TO VERSION CONTROL
# ==================================================================================

# ==================================================================================
# EXCHANGE CONFIGURATION
# ==================================================================================

# Exchange Selection - REQUIRED
# Choose your trading exchange: "coinbase" or "bluefin"
# Bluefin is a decentralized exchange on Sui blockchain offering low fees and high leverage
EXCHANGE__EXCHANGE_TYPE=bluefin

# ==================================================================================
# FUNCTIONAL PROGRAMMING CONFIGURATION (RECOMMENDED - Enhanced Security)
# ==================================================================================
# The new FP configuration system provides better security and validation
# Use these FP variables instead of legacy ones above for enhanced features:

# Exchange Selection (FP Format) - REQUIRED
EXCHANGE_TYPE=bluefin

# Bluefin Configuration (FP Format with Enhanced Security)
BLUEFIN_PRIVATE_KEY=your_sui_wallet_private_key_here  # Automatically masked in logs
BLUEFIN_NETWORK=mainnet  # or testnet
BLUEFIN_RPC_URL=https://sui-mainnet.bluefin.io  # optional custom RPC

# Trading Configuration (FP Format)
TRADING_MODE=paper     # paper, live, or backtest
STRATEGY_TYPE=llm      # llm, momentum, or mean_reversion  
TRADING_PAIRS=SUI-PERP # Comma-separated trading pairs
TRADING_INTERVAL=5m    # Validated interval

# ==================================================================================
# BLUEFIN DEX CONFIGURATION (Required when EXCHANGE__EXCHANGE_TYPE=bluefin)
# ==================================================================================

# Bluefin Sui Wallet Private Key - REQUIRED for Bluefin
# This is your Sui wallet private key that controls your trading funds
# Supported formats:
#   - Hex format: 0x1234567890abcdef... (64 characters)
#   - Raw hex: 1234567890abcdef... (64 characters, no 0x prefix)
#   - Bech32: suiprivkey1... (Sui native format)
#   - Mnemonic: 12 or 24 word seed phrase
# WARNING: Keep this secret! Anyone with this key can access your funds!
# ⚠️ SECURITY CRITICAL: NEVER share or commit this private key!
EXCHANGE__BLUEFIN_PRIVATE_KEY=YOUR_SUI_WALLET_PRIVATE_KEY_HERE

# Bluefin Network Selection - REQUIRED
# Choose which Sui network to connect to:
#   - "mainnet": Real trading with real money (PRODUCTION)
#   - "testnet": Testing with fake money (DEVELOPMENT)
# Recommendation: Use "testnet" for development and testing
EXCHANGE__BLUEFIN_NETWORK=mainnet

# Bluefin Service Configuration - REQUIRED
# The bot uses a microservice architecture for Bluefin SDK operations
# This service handles the Bluefin SDK in an isolated Docker container
BLUEFIN_SERVICE_URL=http://bluefin-service:8080

# Bluefin Service API Key - REQUIRED
# Security key for communicating with the Bluefin microservice
# Generate a new key with: python services/generate_api_key.py
# Or use any secure random string (32+ characters recommended)
# ⚠️ IMPORTANT: Generate a new key with: python services/generate_api_key.py
BLUEFIN_SERVICE_API_KEY=INSERT_YOUR_BLUEFIN_SERVICE_API_KEY

# Custom Sui RPC URL - OPTIONAL
# Override the default Sui RPC endpoint (use for better performance/reliability)
# Leave empty to use default Bluefin RPC endpoints
# EXCHANGE__BLUEFIN_RPC_URL=https://sui-mainnet.nodeinfra.com

# ==================================================================================
# COINBASE CONFIGURATION (Alternative to Bluefin - skip if using Bluefin)
# ==================================================================================

# Coinbase CDP API Configuration - REQUIRED for Coinbase
# Get these from your Coinbase CDP dashboard at https://portal.cdp.coinbase.com/
# ⚠️ IMPORTANT: Replace the placeholders below with your actual Coinbase credentials
# EXCHANGE__CDP_API_KEY_NAME=REPLACE_WITH_YOUR_COINBASE_API_KEY_NAME
# EXCHANGE__CDP_PRIVATE_KEY=INSERT_YOUR_COINBASE_PRIVATE_KEY_HERE

# Coinbase Sandbox Mode - OPTIONAL
# Set to false for production trading, true for testing
# EXCHANGE__CB_SANDBOX=true

# ==================================================================================
# TRADING CONFIGURATION
# ==================================================================================

# Trading Symbol - REQUIRED
# The cryptocurrency pair you want to trade
# Bluefin examples: BTC-PERP, ETH-PERP, SUI-PERP, SOL-PERP
# Coinbase examples: BTC-USD, ETH-USD, SOL-USD
TRADING__SYMBOL=SUI-PERP

# Trading Leverage - REQUIRED
# Multiplier for your position size (higher = more risk/reward)
# Bluefin supports up to 100x, but be conservative:
#   - Conservative: 2-3x
#   - Moderate: 5-10x
#   - Aggressive: 10-20x (NOT recommended)
TRADING__LEVERAGE=5

# Trading Interval - REQUIRED
# How often to analyze the market and make decisions
# Supported intervals: 1m, 3m, 5m, 15m, 30m, 1h, 4h, 1d
# Note: Bluefin only supports 1m minimum (sub-minute intervals are converted to 1m)
TRADING__INTERVAL=1m

# Enable Futures Trading - REQUIRED
# Bluefin only supports perpetual futures, so this should be true
TRADING__ENABLE_FUTURES=true

# Maximum Position Size - REQUIRED
# Percentage of your account to risk per trade (lower = safer)
# Conservative: 10-20%, Moderate: 20-30%, Aggressive: 30-50%
TRADING__MAX_SIZE_PCT=25.0

# Order Timeout - OPTIONAL
# How long to wait for order execution before canceling (seconds)
TRADING__ORDER_TIMEOUT_SECONDS=30

# Slippage Tolerance - OPTIONAL
# Maximum price movement acceptable when executing trades (%)
TRADING__SLIPPAGE_TOLERANCE_PCT=0.1

# ==================================================================================
# SYSTEM CONFIGURATION
# ==================================================================================

# Dry Run Mode - CRITICAL SAFETY SETTING
# Controls whether the bot trades with real money or just simulates
#   - true: PAPER TRADING - No real money is used (SAFE)
#   - false: LIVE TRADING - Real money is used (DANGEROUS)
# ALWAYS start with "true" for testing!
SYSTEM__DRY_RUN=true

# Environment Type - REQUIRED
# Current deployment environment
# Options: development, staging, production
SYSTEM__ENVIRONMENT=development

# Log Level - REQUIRED
# How much detail to log
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Use DEBUG for troubleshooting, INFO for normal operation
LOG_LEVEL=INFO

# Update Frequency - OPTIONAL
# How often the bot checks for new data and makes decisions (seconds)
# Faster = more responsive but higher resource usage
SYSTEM__UPDATE_FREQUENCY_SECONDS=45.0

# ==================================================================================
# CONCURRENCY & PERFORMANCE OPTIMIZATION
# ==================================================================================

# System Concurrency Optimization - OPTIONAL
# Maximum number of concurrent tasks to run simultaneously
# Lower values reduce CPU usage and memory consumption
SYSTEM__MAX_CONCURRENT_TASKS=4

# Thread Pool Size - OPTIONAL
# Size of thread pool for blocking operations
# Lower values reduce thread overhead
SYSTEM__THREAD_POOL_SIZE=2

# Async Operation Timeout - OPTIONAL
# Maximum time to wait for async operations (seconds)
SYSTEM__ASYNC_TIMEOUT=15.0

# Task Batch Size - OPTIONAL
# Number of tasks to process in each batch
SYSTEM__TASK_BATCH_SIZE=2

# WebSocket Queue Size - OPTIONAL
# Maximum number of queued WebSocket messages
# Reduced for memory efficiency
SYSTEM__WEBSOCKET_QUEUE_SIZE=200

# WebSocket Connection Optimization - OPTIONAL
# Optimized settings for better resource usage
SYSTEM__WEBSOCKET_MAX_RETRIES=10
SYSTEM__WEBSOCKET_PING_INTERVAL=30
SYSTEM__WEBSOCKET_PING_TIMEOUT=15

# Functional Programming Runtime Optimization - OPTIONAL
# Maximum concurrent effects in FP runtime
FP_MAX_CONCURRENT_EFFECTS=25

# FP Effect Timeout - OPTIONAL
# Timeout for individual FP effects (seconds)
FP_EFFECT_TIMEOUT=20.0

# ==================================================================================
# AI/LLM CONFIGURATION
# ==================================================================================

# OpenAI API Key - REQUIRED
# Get your API key from https://platform.openai.com/api-keys
# The bot uses AI to make trading decisions
# ⚠️ REQUIRED: Get your API key from https://platform.openai.com/api-keys
LLM__OPENAI_API_KEY=REPLACE_WITH_YOUR_OPENAI_API_KEY

# LLM Configuration (FP Format - Enhanced Security)
LLM_OPENAI_API_KEY=your_openai_api_key_here  # Automatically masked in logs
LLM_MODEL=gpt-4                              # Model selection
LLM_TEMPERATURE=0.7                          # Temperature (0.0-2.0)
LLM_MAX_CONTEXT=4000                         # Max context length
LLM_CONFIDENCE_THRESHOLD=0.7                 # Confidence threshold

# LLM Model Selection - OPTIONAL
# Which AI model to use for trading decisions
# Options: gpt-4, gpt-4-turbo, gpt-4o, o3, o3-mini
# o3 is recommended for best performance
LLM__MODEL_NAME=o3

# LLM Temperature - OPTIONAL
# Controls randomness in AI decisions (0.0 = deterministic, 1.0 = creative)
# Keep low for consistent trading decisions
LLM__TEMPERATURE=0.1

# LLM Max Tokens - OPTIONAL
# Maximum length of AI responses (higher = more detailed analysis)
LLM__MAX_TOKENS=5000

# ==================================================================================
# RISK MANAGEMENT CONFIGURATION
# ==================================================================================

# Daily Loss Limit - REQUIRED
# Maximum percentage of account to lose per day before stopping
# Conservative: 2-5%, Moderate: 5-10%, Aggressive: 10-15%
RISK__MAX_DAILY_LOSS_PCT=5.0

# Weekly Loss Limit - REQUIRED
# Maximum percentage of account to lose per week before stopping
RISK__MAX_WEEKLY_LOSS_PCT=15.0

# Monthly Loss Limit - REQUIRED
# Maximum percentage of account to lose per month before stopping
RISK__MAX_MONTHLY_LOSS_PCT=30.0

# Concurrent Trades - REQUIRED
# Maximum number of trades to have open at once
# Start with 1 to keep things simple
RISK__MAX_CONCURRENT_TRADES=1

# Stop Loss Percentage - REQUIRED
# Percentage loss that triggers automatic position closure
# Tight stops for scalping: 0.3-1.0%
RISK__DEFAULT_STOP_LOSS_PCT=0.5

# Take Profit Percentage - REQUIRED
# Percentage gain that triggers automatic position closure
# Should be larger than stop loss for profitable trading
RISK__DEFAULT_TAKE_PROFIT_PCT=1.0

# Position Hold Time - REQUIRED
# Maximum hours to hold a position before closing
# Shorter for scalping strategies
RISK__MAX_POSITION_HOLD_HOURS=2

# ==================================================================================
# PAPER TRADING CONFIGURATION
# ==================================================================================

# Starting Balance - REQUIRED for paper trading
# Virtual money to start with for simulated trading
PAPER_TRADING__STARTING_BALANCE=10000

# Trading Fee Rate - REQUIRED for paper trading
# Simulated trading fees (Bluefin actual fees are ~0.05%)
PAPER_TRADING__FEE_RATE=0.0005

# Slippage Rate - REQUIRED for paper trading
# Simulated price slippage when executing trades
PAPER_TRADING__SLIPPAGE_RATE=0.0005

# Enable Daily Reports - OPTIONAL
# Generate daily performance reports
PAPER_TRADING__ENABLE_DAILY_REPORTS=true

# ==================================================================================
# WEBSOCKET & DASHBOARD CONFIGURATION
# ==================================================================================

# Enable WebSocket Publishing - OPTIONAL
# Send real-time data to the web dashboard
SYSTEM__ENABLE_WEBSOCKET_PUBLISHING=true

# WebSocket Dashboard URL - OPTIONAL
# URL of the web dashboard for real-time monitoring
SYSTEM__WEBSOCKET_DASHBOARD_URL=ws://localhost:8000/ws

# Enable Performance Monitoring - OPTIONAL
# Track and log bot performance metrics
SYSTEM__ENABLE_PERFORMANCE_MONITORING=true

# ==================================================================================
# FUNCTIONAL PROGRAMMING FEATURE FLAGS (Enhanced Control)
# ==================================================================================

# Feature Flags (FP Configuration)
ENABLE_WEBSOCKET=true         # Real-time market data
ENABLE_RISK_MANAGEMENT=true   # Essential safety features  
ENABLE_METRICS=true           # Performance tracking
ENABLE_MEMORY=false           # AI learning features
ENABLE_PAPER_TRADING=true     # Safe simulation mode
ENABLE_BACKTESTING=true       # Historical testing
ENABLE_NOTIFICATIONS=false    # Trade notifications

# Risk Management (FP Configuration)
MAX_CONCURRENT_POSITIONS=3    # Maximum concurrent positions (1-10)
DEFAULT_POSITION_SIZE=0.1     # Position size as decimal (0.01-1.0)

# Rate Limiting (FP Configuration)  
RATE_LIMIT_RPS=10            # Requests per second
RATE_LIMIT_RPM=100           # Requests per minute
RATE_LIMIT_RPH=1000          # Requests per hour

# ==================================================================================
# ADVANCED CONFIGURATION (OPTIONAL)
# ==================================================================================

# Memory & Learning System - OPTIONAL
# Enable AI learning from past trades (requires MCP server)
MCP_ENABLED=false
MCP_SERVER_URL=http://localhost:8765
MCP_MEMORY_RETENTION_DAYS=90

# ==================================================================================
# OMNISEARCH MCP CONFIGURATION (Optional but Recommended)
# ==================================================================================
# Enable advanced market intelligence, sentiment analysis, and content processing
# These API keys power the MCP-OmniSearch server for enhanced trading decisions

# OmniSearch Core Configuration
OMNISEARCH__ENABLED=false
OMNISEARCH__SERVER_URL=http://localhost:8766

# Search Provider API Keys
# Tavily - Premium search API for financial news and real-time information
# Get your API key from: https://app.tavily.com/
OMNISEARCH__TAVILY_API_KEY=YOUR_TAVILY_API_KEY_HERE
TAVILY_API_KEY=YOUR_TAVILY_API_KEY_HERE

# Brave Search - Privacy-focused search engine API
# Get your API key from: https://api.search.brave.com/
OMNISEARCH__BRAVE_API_KEY=INSERT_YOUR_BRAVE_SEARCH_API_KEY
BRAVE_API_KEY=INSERT_YOUR_BRAVE_SEARCH_API_KEY

# Kagi - Premium search and AI services (FastGPT, Summarizer, Enrichment)
# Get your API key from: https://kagi.com/settings?p=api
OMNISEARCH__KAGI_API_KEY=REPLACE_WITH_ACTUAL_KAGI_KEY
KAGI_API_KEY=REPLACE_WITH_ACTUAL_KAGI_KEY

# AI Response Providers
# Perplexity - AI-powered search and reasoning for market analysis
# Get your API key from: https://www.perplexity.ai/settings/api
OMNISEARCH__PERPLEXITY_API_KEY=YOUR_PERPLEXITY_API_KEY_HERE
PERPLEXITY_API_KEY=YOUR_PERPLEXITY_API_KEY_HERE

# Content Processing APIs
# Jina AI - Advanced text processing, reading, and grounding services
# Get your API key from: https://jina.ai/reader/
OMNISEARCH__JINA_AI_API_KEY=INSERT_YOUR_JINA_AI_API_KEY
JINA_AI_API_KEY=INSERT_YOUR_JINA_AI_API_KEY

# Firecrawl - Web scraping and content extraction for comprehensive analysis
# Get your API key from: https://www.firecrawl.dev/
OMNISEARCH__FIRECRAWL_API_KEY=REPLACE_WITH_YOUR_FIRECRAWL_KEY
FIRECRAWL_API_KEY=REPLACE_WITH_YOUR_FIRECRAWL_KEY

# Data Configuration - OPTIONAL
# Number of historical candles to fetch for analysis
DATA__CANDLE_LIMIT=1000

# Indicator warmup period (minimum candles needed for accurate indicators)
DATA__INDICATOR_WARMUP=100

# ==================================================================================
# ORDERBOOK CONFIGURATION (Advanced Market Data Settings)
# ==================================================================================

# Orderbook Depth Configuration - OPTIONAL
# Number of price levels to fetch from orderbook (higher = more granular data)
# Conservative: 10, Moderate: 20, Aggressive: 30+
MARKET_MAKING__ORDERBOOK__DEPTH_LEVELS=20

# Orderbook Refresh Rate - OPTIONAL
# How often to refresh orderbook data (milliseconds)
# Higher frequency = more up-to-date data but more resource usage
# Conservative: 200ms, Moderate: 100ms, Aggressive: 50ms
MARKET_MAKING__ORDERBOOK__REFRESH_INTERVAL_MS=100

# Maximum Orderbook Age - OPTIONAL
# Maximum age of orderbook data before considering it stale (milliseconds)
MARKET_MAKING__ORDERBOOK__MAX_AGE_MS=1000

# Minimum Liquidity Threshold - OPTIONAL
# Minimum size required at a price level to be considered for trading
MARKET_MAKING__ORDERBOOK__MIN_LIQUIDITY_THRESHOLD=500

# Maximum Spread Detection - OPTIONAL
# Maximum spread in basis points before considering market illiquid
MARKET_MAKING__ORDERBOOK__MAX_SPREAD_BPS=200

# Orderbook Quality Threshold - OPTIONAL
# Minimum quality score (0.0-1.0) for orderbook data to be considered reliable
MARKET_MAKING__ORDERBOOK__QUALITY_THRESHOLD=0.8

# Staleness Detection - OPTIONAL
# Maximum time (ms) before orderbook data is considered stale
MARKET_MAKING__ORDERBOOK__STALENESS_THRESHOLD_MS=2000

# Order Flow Analysis - OPTIONAL
# Enable advanced order flow and imbalance detection
MARKET_MAKING__ORDERBOOK__ENABLE_ORDER_FLOW_ANALYSIS=true

# Imbalance Detection - OPTIONAL
# Threshold for detecting order imbalance (0.0-1.0)
# Higher values = less sensitive to imbalances
MARKET_MAKING__ORDERBOOK__IMBALANCE_DETECTION_THRESHOLD=0.3

# Precision Settings - OPTIONAL
# Decimal precision for price and size formatting
MARKET_MAKING__ORDERBOOK__PRICE_PRECISION=6
MARKET_MAKING__ORDERBOOK__SIZE_PRECISION=4

# Real-time Updates - OPTIONAL
# Enable incremental orderbook updates for better performance
MARKET_MAKING__ORDERBOOK__ENABLE_INCREMENTAL_UPDATES=true

# Snapshot Recovery - OPTIONAL
# Enable automatic snapshot recovery when incremental updates fail
MARKET_MAKING__ORDERBOOK__ENABLE_SNAPSHOT_RECOVERY=true
MARKET_MAKING__ORDERBOOK__SNAPSHOT_RECOVERY_INTERVAL_MS=5000

# Buffer and Performance - OPTIONAL
# Internal buffer size for orderbook data (higher = more memory usage)
MARKET_MAKING__ORDERBOOK__BUFFER_SIZE=1000

# WebSocket Connection Settings - OPTIONAL
# Timeout and heartbeat settings for orderbook WebSocket connections
MARKET_MAKING__ORDERBOOK__WEBSOCKET_TIMEOUT_MS=30000
MARKET_MAKING__ORDERBOOK__HEARTBEAT_INTERVAL_MS=15000
MARKET_MAKING__ORDERBOOK__RECONNECT_DELAY_MS=1000
MARKET_MAKING__ORDERBOOK__MAX_RECONNECT_ATTEMPTS=10

# Market Data Validation - OPTIONAL
# Enable validation of incoming orderbook data
MARKET_MAKING__ORDERBOOK__ENABLE_PRICE_VALIDATION=true
MARKET_MAKING__ORDERBOOK__MAX_PRICE_DEVIATION_PCT=5.0
MARKET_MAKING__ORDERBOOK__ENABLE_SIZE_VALIDATION=true
MARKET_MAKING__ORDERBOOK__MIN_ORDER_SIZE=10
MARKET_MAKING__ORDERBOOK__MAX_ORDER_SIZE=50000
MARKET_MAKING__ORDERBOOK__ENABLE_TIME_VALIDATION=true
MARKET_MAKING__ORDERBOOK__MAX_TIMESTAMP_DRIFT_MS=5000

# ==================================================================================
# CORS & API CONFIGURATION
# ==================================================================================

# CORS Origins - OPTIONAL
# Allowed origins for web dashboard access
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:8080

# CORS Allow Credentials - OPTIONAL
CORS_ALLOW_CREDENTIALS=false

# ==================================================================================
# SECURITY BEST PRACTICES
# ==================================================================================
#
# 1. NEVER commit your .env file to version control
# 2. Use strong, unique API keys for each environment
# 3. Regularly rotate your API keys
# 4. Set restrictive file permissions: chmod 600 .env
# 5. Use different keys for development/staging/production
# 6. Monitor your API key usage and set up alerts
# 7. ALWAYS test with paper trading first (SYSTEM__DRY_RUN=true)
# 8. Keep your Sui wallet private key extremely secure
# 9. Consider using a hardware wallet for large amounts
# 10. Enable 2FA on all your accounts
#
# ==================================================================================
# GETTING STARTED CHECKLIST
# ==================================================================================
#
# [ ] 1. Copy this file to .env: cp .env.example .env
# [ ] 2. Set up your Sui wallet and export the private key
# [ ] 3. Get your OpenAI API key from https://platform.openai.com/
# [ ] 4. Generate a Bluefin service API key: python services/generate_api_key.py
# [ ] 5. Configure your trading symbol and risk parameters
# [ ] 6. VERIFY SYSTEM__DRY_RUN=true for safe testing
# [ ] 7. Validate your configuration: python services/scripts/validate_env.py
# [ ] 8. Start the bot: python -m bot.main live
# [ ] 9. Monitor the dashboard at http://localhost:8000
# [ ] 10. Once comfortable, consider live trading (SYSTEM__DRY_RUN=false)
#
# ==================================================================================
# SUPPORT & TROUBLESHOOTING
# ==================================================================================
#
# If you encounter issues:
# 1. Check the logs in the logs/ directory
# 2. Validate your environment: python services/scripts/validate_env.py
# 3. Verify your API keys are correct and have proper permissions
# 4. Check the Bluefin service is running: curl http://localhost:8081/health
# 5. Review the documentation in docs/bluefin_integration.md
# 6. Ensure your Sui wallet has sufficient SUI for gas fees
# 7. Verify your trading symbol is supported on Bluefin
#
# ==================================================================================
