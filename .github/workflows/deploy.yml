name: Deploy - Simple Docker Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=main-
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy using Docker Compose
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [build]
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up environment
      run: |
        ENV="${{ github.event.inputs.environment || 'staging' }}"
        echo "DEPLOY_ENV=$ENV" >> $GITHUB_ENV
        
        # Determine image tag
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
          echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=main-${{ github.sha }}" >> $GITHUB_ENV
        fi
    
    - name: Create environment file
      run: |
        cat > .env.deploy << EOF
        # Deployment Configuration
        VERSION=${{ env.IMAGE_TAG }}
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        VCS_REF=${{ github.sha }}
        
        # Application Settings
        ENVIRONMENT=${{ env.DEPLOY_ENV }}
        LOG_LEVEL=INFO
        DRY_RUN=${{ env.DEPLOY_ENV == 'production' && 'false' || 'true' }}
        
        # API Keys (from GitHub Secrets)
        COINBASE_API_KEY=${{ secrets.COINBASE_API_KEY }}
        COINBASE_API_SECRET=${{ secrets.COINBASE_API_SECRET }}
        COINBASE_PASSPHRASE=${{ secrets.COINBASE_PASSPHRASE }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        
        # Trading Configuration
        SYMBOL=BTC-USD
        TIMEFRAME=1h
        MAX_POSITION_SIZE=0.1
        RISK_PER_TRADE=0.02
        MAX_DAILY_LOSS=0.05
        EOF
    
    - name: Validate configuration
      run: |
        echo "🔍 Validating deployment configuration..."
        
        # Check required secrets
        required_secrets=(
          "COINBASE_API_KEY"
          "COINBASE_API_SECRET" 
          "COINBASE_PASSPHRASE"
          "OPENAI_API_KEY"
        )
        
        for secret in "${required_secrets[@]}"; do
          if [[ -z "${{ secrets[secret] }}" ]]; then
            echo "❌ Missing required secret: $secret"
            exit 1
          fi
        done
        
        echo "✅ All required secrets present"
    
    - name: Create directories
      run: |
        mkdir -p logs data backups
        chmod 755 logs data backups
    
    - name: Deploy with Docker Compose
      run: |
        # Update image reference in docker-compose.yml
        sed -i "s|image: ai-trading-bot:latest|image: ${{ needs.build.outputs.image-tag }}|g" docker-compose.yml
        
        # Deploy services
        docker-compose --env-file .env.deploy up -d --remove-orphans
        
        echo "✅ Deployment started"
    
    - name: Wait for health check
      run: |
        echo "⏳ Waiting for services to be healthy..."
        
        # Wait up to 5 minutes for container to be healthy
        timeout 300 bash -c '
          while true; do
            if docker-compose ps | grep -q "healthy\|Up"; then
              echo "✅ Container is healthy"
              break
            fi
            echo "⏳ Still waiting for health check..."
            sleep 10
          done
        '
        
        # Show final status
        docker-compose ps
    
    - name: Run post-deployment tests
      run: |
        echo "🧪 Running post-deployment validation..."
        
        # Test container is running
        if ! docker-compose ps | grep -q "Up"; then
          echo "❌ Container is not running"
          exit 1
        fi
        
        # Test configuration validation
        docker-compose exec -T ai-trading-bot python -c "
        from bot.config import Settings
        settings = Settings()
        print('✅ Configuration loaded successfully')
        print(f'   Environment: {settings.system.environment}')
        print(f'   Dry run: {settings.system.dry_run}')
        print(f'   Trading symbol: {settings.trading.symbol}')
        "
        
        echo "✅ Post-deployment tests passed"
    
    - name: Show deployment status
      if: always()
      run: |
        echo "📊 Deployment Status Report"
        echo "=========================="
        echo "Environment: ${{ env.DEPLOY_ENV }}"
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Commit: ${{ github.sha }}"
        echo "Deployed by: ${{ github.actor }}"
        echo ""
        echo "Container Status:"
        docker-compose ps
        echo ""
        echo "Recent Logs:"
        docker-compose logs --tail=20 ai-trading-bot

  # Send notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
    - name: Send success notification
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add Slack/Discord webhook notification here if needed
        
        # Example Slack notification:
        # curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
        #   -H 'Content-type: application/json' \
        #   --data "{\"text\":\"✅ Trading bot deployed successfully to ${{ github.event.inputs.environment || 'staging' }}\"}"
    
    - name: Send failure notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add Slack/Discord webhook notification here if needed
        
        # Example Slack notification:
        # curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
        #   -H 'Content-type: application/json' \
        #   --data "{\"text\":\"❌ Trading bot deployment failed for ${{ github.event.inputs.environment || 'staging' }}\"}"

  # Emergency rollback (manual trigger only)
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    needs: [deploy]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Rollback deployment
      run: |
        echo "🚨 Initiating emergency rollback..."
        
        # Stop current deployment
        docker-compose down
        
        # This could restore from a backup or previous image
        echo "⚠️  Manual intervention required for full rollback"
        echo "   1. Check logs: docker-compose logs"
        echo "   2. Restore configuration if needed"
        echo "   3. Restart with: docker-compose up -d"
    
    - name: Send rollback notification
      run: |
        echo "🚨 Emergency rollback initiated!"
        # Add notification here if needed