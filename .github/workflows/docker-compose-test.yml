name: Docker Compose Configuration Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Default environment variables for CI/CD
  EXCHANGE_TYPE: coinbase
  SYSTEM__DRY_RUN: true
  SYSTEM__ENVIRONMENT: development
  SYMBOL: BTC-USD
  TIMEFRAME: 1h
  LOG_LEVEL: INFO
  OPENAI_MODEL: gpt-4
  OPENAI_TEMPERATURE: 0.1
  OPENAI_MAX_TOKENS: 4000
  # Mock API keys for testing (non-functional)
  OPENAI_API_KEY: sk-test-key-for-ci-cd-only
  COINBASE_API_KEY: test-coinbase-key
  COINBASE_API_SECRET: test-coinbase-secret  
  COINBASE_PASSPHRASE: test-passphrase
  BLUEFIN_PRIVATE_KEY: test-private-key
  BLUEFIN_NETWORK: testnet

jobs:
  docker-compose-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create CI environment file
      run: |
        # Create .env file for CI/CD with safe defaults
        cat > .env << EOF
        # CI/CD Environment Configuration
        EXCHANGE_TYPE=${EXCHANGE_TYPE}
        SYSTEM__DRY_RUN=${SYSTEM__DRY_RUN}
        SYSTEM__ENVIRONMENT=${SYSTEM__ENVIRONMENT}
        SYMBOL=${SYMBOL}
        TIMEFRAME=${TIMEFRAME}
        LOG_LEVEL=${LOG_LEVEL}
        OPENAI_MODEL=${OPENAI_MODEL}
        OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE}
        OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS}
        
        # Mock credentials for testing (non-functional)
        OPENAI_API_KEY=${OPENAI_API_KEY}
        COINBASE_API_KEY=${COINBASE_API_KEY}
        COINBASE_API_SECRET=${COINBASE_API_SECRET}
        COINBASE_PASSPHRASE=${COINBASE_PASSPHRASE}
        BLUEFIN_PRIVATE_KEY=${BLUEFIN_PRIVATE_KEY}
        BLUEFIN_NETWORK=${BLUEFIN_NETWORK}
        
        # Additional CI settings
        ENABLE_BACKTESTING=false
        ENABLE_PAPER_TRADING=true
        ENABLE_LIVE_TRADING=false
        TESTING=true
        DEBUG=false
        CONFIG_FILE=./config/development.json
        EOF
        
    - name: Validate docker-compose configuration
      run: |
        echo "Testing docker-compose configuration..."
        docker-compose -f docker-compose.yml config --quiet
        echo "‚úÖ Docker Compose configuration is valid"
        
    - name: Test docker-compose config output
      run: |
        echo "Generating docker-compose configuration..."
        docker-compose -f docker-compose.yml config > docker-compose-resolved.yml
        echo "‚úÖ Configuration generated successfully"
        
    - name: Validate all service definitions
      run: |
        echo "Validating individual services..."
        
        # Test each service configuration
        services=("ai-trading-bot" "bluefin-service" "mcp-omnisearch" "mcp-memory" "dashboard-backend" "dashboard-frontend")
        
        for service in "${services[@]}"; do
          echo "Validating $service..."
          docker-compose -f docker-compose.yml config --services | grep -q "$service"
          if [ $? -eq 0 ]; then
            echo "‚úÖ $service service definition is valid"
          else
            echo "‚ùå $service service definition is missing or invalid"
            exit 1
          fi
        done
        
    - name: Test environment variable substitution
      run: |
        echo "Testing environment variable substitution..."
        
        # Check if key environment variables are properly substituted
        config_output=$(docker-compose -f docker-compose.yml config)
        
        # Verify critical environment variables are set
        if echo "$config_output" | grep -q "DRY_RUN.*true"; then
          echo "‚úÖ DRY_RUN environment variable properly set"
        else
          echo "‚ùå DRY_RUN environment variable not found or incorrect"
          exit 1
        fi
        
        if echo "$config_output" | grep -q "LOG_LEVEL.*INFO"; then
          echo "‚úÖ LOG_LEVEL environment variable properly set"
        else
          echo "‚ùå LOG_LEVEL environment variable not found or incorrect"
          exit 1
        fi
        
    - name: Test without .env file (CI/CD scenario)
      run: |
        echo "Testing configuration without .env file..."
        
        # Remove .env file to simulate CI/CD environment
        rm -f .env
        
        # Should still work with env_file.required=false
        docker-compose -f docker-compose.yml config --quiet
        echo "‚úÖ Docker Compose works without .env file"
        
    - name: Test build contexts exist
      run: |
        echo "Verifying build contexts exist..."
        
        # Check if all build contexts exist
        contexts=("." "./services" "./bot/mcp/omnisearch-server" "./bot/mcp" "./dashboard/backend" "./dashboard/frontend")
        
        for context in "${contexts[@]}"; do
          if [ -d "$context" ]; then
            echo "‚úÖ Build context $context exists"
          else
            echo "‚ùå Build context $context is missing"
            exit 1
          fi
        done
        
    - name: Verify Dockerfile existence
      run: |
        echo "Verifying Dockerfiles exist..."
        
        dockerfiles=(
          "./Dockerfile"
          "./services/Dockerfile.bluefin" 
          "./bot/mcp/omnisearch-server/Dockerfile"
          "./bot/mcp/Dockerfile"
          "./dashboard/backend/Dockerfile"
          "./dashboard/frontend/Dockerfile"
        )
        
        for dockerfile in "${dockerfiles[@]}"; do
          if [ -f "$dockerfile" ]; then
            echo "‚úÖ $dockerfile exists"
          else
            echo "‚ùå $dockerfile is missing"
            exit 1
          fi
        done
        
    - name: Test network configuration
      run: |
        echo "Testing network configuration..."
        config_output=$(docker-compose -f docker-compose.yml config)
        
        if echo "$config_output" | grep -q "trading-network"; then
          echo "‚úÖ Trading network is properly configured"
        else
          echo "‚ùå Trading network configuration is missing"
          exit 1
        fi
        
    - name: Validate health checks
      run: |
        echo "Validating health check configurations..."
        config_output=$(docker-compose -f docker-compose.yml config)
        
        # Check for health check definitions
        if echo "$config_output" | grep -q "healthcheck"; then
          echo "‚úÖ Health checks are configured"
        else
          echo "‚ö†Ô∏è No health checks found (optional but recommended)"
        fi
        
    - name: Summary
      run: |
        echo ""
        echo "üéâ All Docker Compose configuration tests passed!"
        echo ""
        echo "‚úÖ Configuration is valid"
        echo "‚úÖ Environment variables are properly handled"
        echo "‚úÖ Missing .env file is handled gracefully" 
        echo "‚úÖ All build contexts exist"
        echo "‚úÖ All Dockerfiles exist"
        echo "‚úÖ Network configuration is valid"
        echo ""
        echo "The docker-compose.yml is ready for CI/CD deployment!"