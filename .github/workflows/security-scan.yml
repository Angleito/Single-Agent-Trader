name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "2.1.3"
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          echo "Checking Poetry configuration..."
          poetry config --list
          echo "Checking project configuration..."
          poetry check
          # Check if lock file is consistent with pyproject.toml
          if ! poetry check --lock 2>/dev/null; then
            echo "Lock file is inconsistent, regenerating..."
            poetry lock --verbose
          fi
          echo "Installing dependencies..."
          poetry install --only=main --no-interaction --verbose

      - name: Run Safety check
        run: |
          poetry run pip install safety
          poetry run safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run Bandit security scan
        run: |
          poetry run bandit -r bot/ -f json -o bandit-report.json -ll
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: python-security-reports
          path: |
            safety-report.json
            bandit-report.json

  # Container image scanning with comprehensive Trivy integration
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    outputs:
      security_status: ${{ steps.trivy-gate.outputs.security_status }}
      critical_count: ${{ steps.trivy-gate.outputs.critical_count }}
      high_count: ${{ steps.trivy-gate.outputs.high_count }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          echo "Building images for security scanning..."

          # Main trading bot image
          docker build -t ai-trading-bot:scan-${{ github.run_number }} .

          # Bluefin service
          if [ -f "services/Dockerfile.bluefin" ]; then
            docker build -f services/Dockerfile.bluefin -t bluefin-sdk-service:scan-${{ github.run_number }} ./services
          fi

          # MCP memory server
          if [ -f "bot/mcp/Dockerfile" ]; then
            docker build -f bot/mcp/Dockerfile -t mcp-memory-server:scan-${{ github.run_number }} ./bot/mcp
          fi

          # MCP omnisearch server
          if [ -f "bot/mcp/omnisearch-server/Dockerfile" ]; then
            docker build -f bot/mcp/omnisearch-server/Dockerfile -t mcp-omnisearch-server:scan-${{ github.run_number }} ./bot/mcp/omnisearch-server
          fi

          echo "Built images:"
          docker images | grep scan-${{ github.run_number }}

      - name: Create Trivy reports directory
        run: mkdir -p security/trivy/reports/ci

      - name: Run Trivy vulnerability scan on main image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ai-trading-bot:scan-${{ github.run_number }}
          format: 'sarif'
          output: 'security/trivy/reports/ci/trading-bot-vuln.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Run Trivy secret scan on main image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ai-trading-bot:scan-${{ github.run_number }}
          format: 'sarif'
          output: 'security/trivy/reports/ci/trading-bot-secrets.sarif'
          scanners: 'secret'
          exit-code: '0'

      - name: Run Trivy config scan on main image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ai-trading-bot:scan-${{ github.run_number }}
          format: 'sarif'
          output: 'security/trivy/reports/ci/trading-bot-config.sarif'
          scanners: 'config'
          exit-code: '0'

      - name: Generate SBOM for main image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ai-trading-bot:scan-${{ github.run_number }}
          format: 'cyclonedx'
          output: 'security/trivy/reports/ci/trading-bot-sbom.json'

      - name: Scan service images
        run: |
          # Scan all built service images
          for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep scan-${{ github.run_number }} | grep -v ai-trading-bot); do
            image_name=$(echo $image | cut -d: -f1 | tr '/' '-')
            echo "Scanning service image: $image"

            # Vulnerability scan
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v $(pwd)/security/trivy/reports/ci:/output \
              aquasec/trivy:latest image \
              --format sarif \
              --output /output/${image_name}-vuln.sarif \
              --severity CRITICAL,HIGH,MEDIUM \
              $image || echo "Scan failed for $image"

            # Secret scan
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v $(pwd)/security/trivy/reports/ci:/output \
              aquasec/trivy:latest image \
              --format sarif \
              --output /output/${image_name}-secrets.sarif \
              --scanners secret \
              $image || echo "Secret scan failed for $image"

            # SBOM generation
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v $(pwd)/security/trivy/reports/ci:/output \
              aquasec/trivy:latest image \
              --format cyclonedx \
              --output /output/${image_name}-sbom.json \
              $image || echo "SBOM generation failed for $image"
          done

      - name: Run comprehensive security gate
        id: trivy-gate
        run: |
          echo "Running Trivy security gate analysis..."

          # Make scripts executable
          chmod +x security/trivy/*.sh

          # Run the security gate with CI/CD integration
          if ./security/trivy/ci-cd-security-gate.sh \
            --max-critical 0 \
            --max-high 5 \
            --max-medium 20 \
            --timeout 1800; then
            echo "security_status=passed" >> $GITHUB_OUTPUT
            echo "✅ Security gate passed"
          else
            echo "security_status=failed" >> $GITHUB_OUTPUT
            echo "❌ Security gate failed"
            exit 1
          fi

      - name: Upload all SARIF results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security/trivy/reports/ci/
          category: trivy-comprehensive-scan
        continue-on-error: true

      - name: Upload Trivy scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results-${{ github.run_number }}
          path: |
            security/trivy/reports/
            !security/trivy/reports/cache/
          retention-days: 30

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: ai-trading-bot:scan-${{ github.run_number }}
          fail-build: false
          output-format: json
          severity-cutoff: high
        continue-on-error: true

      - name: Upload Grype scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: grype-results-${{ github.run_number }}
          path: results.json

  # Filesystem and source code scanning
  filesystem-scan:
    name: Filesystem Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    outputs:
      fs_security_status: ${{ steps.fs-gate.outputs.security_status }}
      secret_count: ${{ steps.fs-gate.outputs.secret_count }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create filesystem reports directory
        run: mkdir -p security/trivy/reports/filesystem

      - name: Run Trivy filesystem vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'security/trivy/reports/filesystem/fs-vuln.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Run Trivy filesystem secret scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'security/trivy/reports/filesystem/fs-secrets.sarif'
          scanners: 'secret'
          exit-code: '0'

      - name: Run Trivy filesystem config scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'security/trivy/reports/filesystem/fs-config.sarif'
          scanners: 'config'
          exit-code: '0'

      - name: Run Trivy filesystem license scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'security/trivy/reports/filesystem/fs-license.sarif'
          scanners: 'license'
          exit-code: '0'

      - name: Generate filesystem SBOM
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'cyclonedx'
          output: 'security/trivy/reports/filesystem/fs-sbom.json'

      - name: Run filesystem security gate
        id: fs-gate
        run: |
          echo "Running filesystem security gate..."

          # Make scripts executable
          chmod +x security/trivy/*.sh

          # Run filesystem scan with our custom script
          if ./security/trivy/scan-filesystem.sh \
            --format sarif \
            --severity CRITICAL,HIGH,MEDIUM \
            --no-save; then
            echo "security_status=passed" >> $GITHUB_OUTPUT
            echo "✅ Filesystem security gate passed"
          else
            echo "security_status=failed" >> $GITHUB_OUTPUT
            echo "❌ Filesystem security gate failed"
          fi

      - name: Upload filesystem SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security/trivy/reports/filesystem/
          category: trivy-filesystem-scan
        continue-on-error: true

      - name: Upload filesystem scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: filesystem-scan-results-${{ github.run_number }}
          path: |
            security/trivy/reports/filesystem/
            security/trivy/reports/secrets/
            security/trivy/reports/configs/
            security/trivy/reports/licenses/
          retention-days: 30

  # Additional secret scanning tools
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    needs: filesystem-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      - name: GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Detect secrets with detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline || echo "No baseline found, creating new one"
          detect-secrets audit .secrets.baseline || true
        continue-on-error: true

      - name: Compare with Trivy secret results
        run: |
          echo "Comparing secret detection results..."
          echo "Trivy filesystem scan status: ${{ needs.filesystem-scan.outputs.fs_security_status }}"
          echo "Trivy secret count: ${{ needs.filesystem-scan.outputs.secret_count }}"

          if [ "${{ needs.filesystem-scan.outputs.secret_count }}" -gt "0" ]; then
            echo "⚠️ Trivy found secrets in the codebase"
            echo "Check the filesystem scan artifacts for details"
          else
            echo "✅ Trivy found no secrets"
          fi

  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/dockerfile
            p/docker-compose
            p/secrets
            p/owasp-top-ten
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: License Finder
        run: |
          docker run -v $PWD:/scan licensefinder/license_finder /bin/bash -lc "cd /scan && license_finder"
        continue-on-error: true

  # Docker security best practices
  docker-lint:
    name: Docker Security Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Hadolint Dockerfile Linting
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: hadolint-results.sarif

      - name: Docker Compose validation
        run: |
          docker-compose -f docker-compose.yml config
          docker-compose -f docker-compose.secure.yml config
          docker-compose -f docker-compose.secrets.yml config

  # Security report summary with Trivy integration
  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, filesystem-scan, secret-scan, sast-scan, license-check, docker-lint]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Generate comprehensive security report
        run: |
          echo "# 🔒 AI Trading Bot Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Date**: $(date)" >> security-summary.md
          echo "**Commit**: ${{ github.sha }}" >> security-summary.md
          echo "**Branch**: ${{ github.ref_name }}" >> security-summary.md
          echo "**Build**: ${{ github.run_number }}" >> security-summary.md
          echo "" >> security-summary.md

          # Add overall security status
          echo "## 🎯 Overall Security Status" >> security-summary.md
          echo "" >> security-summary.md

          # Container security status
          container_status="${{ needs.container-scan.outputs.security_status }}"
          if [ "$container_status" == "passed" ]; then
            echo "🟢 **Container Security**: PASSED" >> security-summary.md
          else
            echo "🔴 **Container Security**: FAILED" >> security-summary.md
          fi

          # Filesystem security status
          fs_status="${{ needs.filesystem-scan.outputs.fs_security_status }}"
          if [ "$fs_status" == "passed" ]; then
            echo "🟢 **Filesystem Security**: PASSED" >> security-summary.md
          else
            echo "🔴 **Filesystem Security**: FAILED" >> security-summary.md
          fi

          echo "" >> security-summary.md

          # Add detailed scan results
          echo "## 📊 Detailed Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "| Component | Status | Critical | High | Secrets |" >> security-summary.md
          echo "|-----------|---------|----------|------|---------|" >> security-summary.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} | - | - | - |" >> security-summary.md
          echo "| Container Scan | ${{ needs.container-scan.result }} | ${{ needs.container-scan.outputs.critical_count || '0' }} | ${{ needs.container-scan.outputs.high_count || '0' }} | - |" >> security-summary.md
          echo "| Filesystem Scan | ${{ needs.filesystem-scan.result }} | - | - | ${{ needs.filesystem-scan.outputs.secret_count || '0' }} |" >> security-summary.md
          echo "| Secret Scan | ${{ needs.secret-scan.result }} | - | - | - |" >> security-summary.md
          echo "| SAST Scan | ${{ needs.sast-scan.result }} | - | - | - |" >> security-summary.md
          echo "| License Check | ${{ needs.license-check.result }} | - | - | - |" >> security-summary.md
          echo "| Docker Lint | ${{ needs.docker-lint.result }} | - | - | - |" >> security-summary.md
          echo "" >> security-summary.md

          # Add security gate results
          echo "## 🚦 Security Gate Results" >> security-summary.md
          echo "" >> security-summary.md

          # Critical vulnerabilities check
          critical_count="${{ needs.container-scan.outputs.critical_count || '0' }}"
          if [ "$critical_count" -eq "0" ]; then
            echo "✅ **Critical Vulnerabilities**: None found" >> security-summary.md
          else
            echo "❌ **Critical Vulnerabilities**: $critical_count found (Threshold: 0)" >> security-summary.md
          fi

          # Secrets check
          secret_count="${{ needs.filesystem-scan.outputs.secret_count || '0' }}"
          if [ "$secret_count" -eq "0" ]; then
            echo "✅ **Secrets Detection**: None found" >> security-summary.md
          else
            echo "❌ **Secrets Detection**: $secret_count found (Threshold: 0)" >> security-summary.md
          fi

          echo "" >> security-summary.md

          # Add action items
          echo "## 🎯 Action Items" >> security-summary.md
          echo "" >> security-summary.md

          if [ "$container_status" != "passed" ] || [ "$fs_status" != "passed" ]; then
            echo "### ⚠️ Security Issues Found" >> security-summary.md
            echo "1. **Review SARIF results** in the Security tab" >> security-summary.md
            echo "2. **Download artifacts** for detailed analysis" >> security-summary.md
            echo "3. **Fix critical vulnerabilities** before merging" >> security-summary.md
            echo "4. **Remove any exposed secrets** immediately" >> security-summary.md
            echo "5. **Update dependencies** with security patches" >> security-summary.md
          else
            echo "### ✅ No Critical Issues" >> security-summary.md
            echo "1. All security gates passed" >> security-summary.md
            echo "2. No critical vulnerabilities found" >> security-summary.md
            echo "3. No secrets detected in codebase" >> security-summary.md
            echo "4. Ready for deployment" >> security-summary.md
          fi

          echo "" >> security-summary.md

          # Add artifact information
          echo "## 📁 Available Artifacts" >> security-summary.md
          echo "" >> security-summary.md
          echo "- **Trivy Container Scans**: SARIF files and detailed reports" >> security-summary.md
          echo "- **Trivy Filesystem Scans**: Secret, config, and vulnerability analysis" >> security-summary.md
          echo "- **SBOM Files**: Software Bill of Materials for compliance" >> security-summary.md
          echo "- **Python Security Reports**: Safety and Bandit analysis" >> security-summary.md
          echo "- **Additional Scans**: Grype, SAST, and license compliance" >> security-summary.md
          echo "" >> security-summary.md

          echo "## 🔗 Resources" >> security-summary.md
          echo "" >> security-summary.md
          echo "- [GitHub Security Tab](https://github.com/${{ github.repository }}/security)" >> security-summary.md
          echo "- [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> security-summary.md
          echo "- [Security Hardening Guide](./SECURITY_HARDENING_GUIDE.md)" >> security-summary.md

          cat security-summary.md

      - name: Upload comprehensive security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-${{ github.run_number }}
          path: security-summary.md

      - name: Comment PR with enhanced security summary
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');

            let comment = '## 🔒 Security Scan Results\n\n';

            // Add status badges
            const containerStatus = '${{ needs.container-scan.outputs.security_status }}';
            const fsStatus = '${{ needs.filesystem-scan.outputs.fs_security_status }}';

            const containerBadge = containerStatus === 'passed' ? '🟢 PASSED' : '🔴 FAILED';
            const fsBadge = fsStatus === 'passed' ? '🟢 PASSED' : '🔴 FAILED';

            comment += `**Container Security**: ${containerBadge}\n`;
            comment += `**Filesystem Security**: ${fsBadge}\n\n`;

            // Add vulnerability counts
            const criticalCount = '${{ needs.container-scan.outputs.critical_count }}' || '0';
            const highCount = '${{ needs.container-scan.outputs.high_count }}' || '0';
            const secretCount = '${{ needs.filesystem-scan.outputs.secret_count }}' || '0';

            comment += '### 📊 Vulnerability Summary\n\n';
            comment += `- **Critical**: ${criticalCount}\n`;
            comment += `- **High**: ${highCount}\n`;
            comment += `- **Secrets**: ${secretCount}\n\n`;

            // Add full summary if available
            try {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              comment += '<details>\n<summary>📋 Full Security Report</summary>\n\n';
              comment += summary;
              comment += '\n</details>\n';
            } catch (error) {
              comment += 'Full security report available in workflow artifacts.\n';
            }

            // Add action items
            if (containerStatus !== 'passed' || fsStatus !== 'passed' ||
                parseInt(criticalCount) > 0 || parseInt(secretCount) > 0) {
              comment += '\n### ⚠️ Action Required\n';
              comment += '- Review security scan results before merging\n';
              comment += '- Fix critical vulnerabilities and remove secrets\n';
              comment += '- Check workflow artifacts for detailed reports\n';
            } else {
              comment += '\n### ✅ Security Approved\n';
              comment += '- All security checks passed\n';
              comment += '- No critical issues found\n';
              comment += '- Ready for review and merge\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Create security gate enforcement
        run: |
          echo "Enforcing security gate policies..."

          # Check if any critical security issues were found
          container_status="${{ needs.container-scan.outputs.security_status }}"
          fs_status="${{ needs.filesystem-scan.outputs.fs_security_status }}"
          critical_count="${{ needs.container-scan.outputs.critical_count || '0' }}"
          secret_count="${{ needs.filesystem-scan.outputs.secret_count || '0' }}"

          if [ "$container_status" != "passed" ] || [ "$fs_status" != "passed" ]; then
            echo "❌ Security gate failed - blocking deployment"
            exit 1
          fi

          if [ "$critical_count" -gt "0" ]; then
            echo "❌ Critical vulnerabilities found - blocking deployment"
            exit 1
          fi

          if [ "$secret_count" -gt "0" ]; then
            echo "❌ Secrets found in codebase - blocking deployment"
            exit 1
          fi

          echo "✅ Security gate passed - deployment approved"
