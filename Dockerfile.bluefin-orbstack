# OrbStack-Optimized Bluefin Trading Bot Dockerfile
# Fixes Socket.IO conflicts and enables proper live trading

FROM python:3.12-slim AS builder

# Install UV for fast Python package management
ENV UV_VERSION=0.5.11
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV PATH="/root/.local/bin:$PATH"

# Install build dependencies for Bluefin SDK
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    make \
    libffi-dev \
    libssl-dev \
    python3-dev \
    autoconf \
    automake \
    libtool \
    pkg-config \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependency files
COPY requirements.bluefin.txt requirements.txt
COPY pyproject.bluefin.toml pyproject.toml

# Create virtual environment and install dependencies with Socket.IO fixes
RUN uv venv /app/.venv && \
    . /app/.venv/bin/activate && \
    echo "=== Cleaning conflicting Socket.IO packages ===" && \
    uv pip uninstall socketio websocket python-socketio python-engineio || true && \
    echo "=== Installing core data dependencies first ===" && \
    uv pip install --no-cache-dir \
        "numpy>=1.26.4" \
        "pandas>=2.3.0" \
        "scipy>=1.15.3" && \
    echo "=== Installing core dependencies ===" && \
    uv pip install --no-cache-dir \
        "python-dotenv>=1.0.1" \
        "pydantic>=2.10.5" \
        "pydantic-settings>=2.7.0" \
        "click>=8.1.7" && \
    echo "=== Installing Socket.IO with correct versions ===" && \
    uv pip install --no-cache-dir \
        "python-socketio[asyncio_client]==5.8.0" \
        "python-engineio>=4.6.0,<4.7.0" \
        "websockets==12.0" \
        "aiohttp==3.9.0" && \
    echo "=== Installing Bluefin SDK ===" && \
    uv pip install --no-cache-dir "bluefin-v2-client==3.2.4" && \
    echo "=== Installing remaining dependencies ===" && \
    uv pip install --no-cache-dir -r requirements.txt && \
    echo "=== Final cleanup of conflicting packages ===" && \
    uv pip uninstall socketio websocket || true && \
    echo "=== Verifying installations ===" && \
    python -c "import pandas; print('✅ Pandas:', pandas.__version__)" && \
    python -c "import numpy; print('✅ NumPy:', numpy.__version__)" && \
    python -c "import socketio; print('✅ Socket.IO:', socketio.__version__); print('✅ AsyncClient available:', hasattr(socketio, 'AsyncClient'))" && \
    python -c "import bluefin_v2_client; print('✅ Bluefin SDK available')" || echo "⚠️ Bluefin SDK import failed (will use fallback mode)"

# Production stage
FROM python:3.12-slim

ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=0.1.0

# Environment variables optimized for OrbStack
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH="/app" \
    VIRTUAL_ENV="/app/.venv" \
    UV_NO_CACHE=1 \
    EXCHANGE__EXCHANGE_TYPE=bluefin \
    SOCKETIO_ASYNC_MODE=aiohttp \
    BLUEFIN_NETWORK_TIMEOUT=30

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install UV in production
RUN curl -LsSf https://astral.sh/uv/0.5.11/install.sh | sh
ENV PATH="/root/.local/bin:$PATH"

# Create non-root user
RUN groupadd --gid 1000 botuser \
    && useradd --uid 1000 --gid 1000 --create-home --shell /bin/bash botuser

WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder --chown=botuser:botuser /app/.venv /app/.venv

# Copy application code
COPY --chown=botuser:botuser bot/ ./bot/
COPY --chown=botuser:botuser pyproject.bluefin.toml ./pyproject.toml

# Create required directories
RUN mkdir -p /app/config /app/logs /app/data /app/prompts \
    && chown -R botuser:botuser /app

# Copy configuration and prompt files
COPY --chown=botuser:botuser prompts/*.txt ./prompts/

# Create health check script
RUN echo '#!/bin/bash\npython -c "import sys; sys.exit(0)"' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh && \
    chown botuser:botuser /app/healthcheck.sh

# Switch to non-root user
USER botuser

# Verify installation
RUN echo "=== Final verification ===" && \
    python -c "print('✅ Python environment ready')" && \
    python -c "import socketio; print('✅ Socket.IO ready:', socketio.__version__)" && \
    python -c "import bluefin_v2_client; print('✅ Bluefin SDK ready')" || echo "⚠️ Bluefin SDK will use fallback mode"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ["/app/healthcheck.sh"]

# Default command - SUI-PERP live trading
CMD ["python", "-m", "bot.main", "live", "--symbol", "SUI-PERP", "--interval", "5m"]

# Labels
LABEL org.opencontainers.image.title="AI Trading Bot - Bluefin OrbStack Edition" \
      org.opencontainers.image.description="Bluefin DEX trading bot optimized for OrbStack" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.python="3.12" \
      org.opencontainers.image.package_manager="uv" \
      maintainer="ai-trading-bot"