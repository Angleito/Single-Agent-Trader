# Bluefin Trading Bot - Using UV for fast dependency management
# This image includes the Bluefin SDK for paper and live trading

FROM python:3.11-slim AS builder

# Install UV for fast Python package management
ENV UV_VERSION=0.5.11
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    && curl -LsSf https://astral.sh/uv/${UV_VERSION}/install.sh | sh \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV PATH="/root/.local/bin:$PATH"

# Install build dependencies needed for Bluefin SDK
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    make \
    libffi-dev \
    libssl-dev \
    python3-dev \
    autoconf \
    automake \
    libtool \
    pkg-config \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependency files
COPY requirements.bluefin.txt requirements.txt
COPY pyproject.bluefin.toml pyproject.toml

# Create virtual environment and install dependencies with UV
RUN uv venv /app/.venv && \
    . /app/.venv/bin/activate && \
    uv pip install --no-cache -r requirements.txt && \
    uv pip uninstall socketio websocket && \
    echo "Dependencies installed successfully for paper trading mode"

# Production stage
FROM python:3.11-slim

ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=0.1.0

# Environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH="/app" \
    VIRTUAL_ENV="/app/.venv" \
    UV_NO_CACHE=1 \
    EXCHANGE__EXCHANGE_TYPE=bluefin

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install UV in production for potential runtime package management
RUN curl -LsSf https://astral.sh/uv/0.5.11/install.sh | sh
ENV PATH="/root/.local/bin:$PATH"

# Create non-root user
RUN groupadd --gid 1000 botuser \
    && useradd --uid 1000 --gid 1000 --create-home --shell /bin/bash botuser

WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder --chown=botuser:botuser /app/.venv /app/.venv

# Copy application code
COPY --chown=botuser:botuser bot/ ./bot/
COPY --chown=botuser:botuser pyproject.bluefin.toml ./pyproject.toml

# Create required directories
RUN mkdir -p /app/config /app/logs /app/data /app/prompts \
    && chown -R botuser:botuser /app

# Copy prompt files
COPY --chown=botuser:botuser prompts/*.txt ./prompts/

# Copy health check script
COPY --chown=botuser:botuser healthcheck.sh /app/healthcheck.sh
RUN chmod +x /app/healthcheck.sh

# Switch to non-root user
USER botuser

# Verify Python environment is working
RUN python -c "print('âœ… Python environment ready')"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD ["/app/healthcheck.sh"]

# Default command - starts in paper trading mode
CMD ["python", "-m", "bot.main", "live", "--dry-run", "--symbol", "ETH-PERP"]

# Labels
LABEL org.opencontainers.image.title="AI Trading Bot - Bluefin Edition (UV)" \
      org.opencontainers.image.description="Bluefin DEX trading bot with UV package management" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.python="3.11" \
      org.opencontainers.image.package_manager="uv" \
      maintainer="ai-trading-bot"