# Simplified AI Trading Bot Dockerfile for VPS
# Works without scripts/, docs/, prompts/ directories

# Build stage
FROM python:3.12-slim AS builder

ARG POETRY_VERSION=1.8.2

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    ca-certificates \
    git \
    && rm -rf /var/lib/apt/lists/*

ENV POETRY_HOME="/opt/poetry" \
    POETRY_VENV_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache
RUN curl -sSL https://install.python-poetry.org | python3 - --version=${POETRY_VERSION}
ENV PATH="$POETRY_HOME/bin:$PATH"

WORKDIR /app

COPY pyproject.toml poetry.lock* ./

RUN poetry config virtualenvs.in-project true \
    && poetry install --only=main --no-root \
    && rm -rf $POETRY_CACHE_DIR

# Production stage
FROM python:3.12-slim AS production

ARG EXCHANGE_TYPE=coinbase

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH="/app" \
    EXCHANGE__EXCHANGE_TYPE=${EXCHANGE_TYPE}

RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

RUN groupadd --gid 1000 botuser \
    && useradd --uid 1000 --gid 1000 --create-home --shell /bin/bash botuser

WORKDIR /app

COPY --from=builder --chown=botuser:botuser /app/.venv /app/.venv

RUN if [ "${EXCHANGE_TYPE}" = "bluefin" ]; then \
        echo "Installing Bluefin dependencies..." && \
        /app/.venv/bin/pip install --no-cache-dir \
            bluefin-v2-client==3.2.4 \
            aiohttp==3.8.6 \
            websocket-client==1.6.4; \
    fi

COPY --chown=botuser:botuser bot/ ./bot/
COPY --chown=botuser:botuser pyproject.toml ./

RUN mkdir -p /app/config /app/logs /app/data /app/prompts /app/scripts /app/docs \
    && chown -R botuser:botuser /app

# Create a simple health check script
RUN echo '#!/bin/bash\npgrep -f "python -m bot.main" > /dev/null || exit 1' > /app/healthcheck.sh \
    && chmod +x /app/healthcheck.sh

USER botuser

HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD ["/app/healthcheck.sh"]

EXPOSE 8080

CMD ["python", "-m", "bot.main", "live", "--dry-run"]