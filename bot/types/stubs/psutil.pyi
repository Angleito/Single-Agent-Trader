"""Type stubs for psutil library."""

from typing import Any, Dict, List, Optional, Union, NamedTuple, Iterator
import enum

__all__ = [
    "cpu_percent",
    "cpu_count",
    "cpu_stats",
    "cpu_times",
    "cpu_times_percent",
    "cpu_freq",
    "getloadavg",
    "virtual_memory",
    "swap_memory",
    "disk_usage",
    "disk_partitions",
    "disk_io_counters",
    "net_io_counters",
    "net_connections",
    "net_if_addrs",
    "net_if_stats",
    "sensors_temperatures",
    "sensors_fans",
    "sensors_battery",
    "boot_time",
    "users",
    "pids",
    "pid_exists",
    "process_iter",
    "wait_procs",
    "Process",
    "NoSuchProcess",
    "ZombieProcess",
    "AccessDenied",
    "TimeoutExpired",
]

class NoSuchProcess(Exception):
    """Process no longer exists."""
    pid: int
    name: Optional[str]
    msg: str

class ZombieProcess(NoSuchProcess):
    """Process is a zombie."""
    ...

class AccessDenied(Exception):
    """Access denied."""
    pid: Optional[int]
    name: Optional[str]
    msg: str

class TimeoutExpired(Exception):
    """Timeout expired."""
    seconds: float
    pid: Optional[int]
    name: Optional[str]

# CPU
def cpu_percent(interval: Optional[float] = None, percpu: bool = False) -> Union[float, List[float]]: ...
def cpu_count(logical: bool = True) -> Optional[int]: ...
def cpu_stats() -> Any: ...
def cpu_times(percpu: bool = False) -> Any: ...
def cpu_times_percent(interval: float = 0.1, percpu: bool = False) -> Any: ...
def cpu_freq(percpu: bool = False) -> Any: ...
def getloadavg() -> tuple[float, float, float]: ...

# Memory
class svmem(NamedTuple):
    total: int
    available: int
    percent: float
    used: int
    free: int
    active: Optional[int]
    inactive: Optional[int]
    buffers: Optional[int]
    cached: Optional[int]
    shared: Optional[int]

class sswap(NamedTuple):
    total: int
    used: int
    free: int
    percent: float
    sin: int
    sout: int

def virtual_memory() -> svmem: ...
def swap_memory() -> sswap: ...

# Disk
class sdiskusage(NamedTuple):
    total: int
    used: int
    free: int
    percent: float

class sdiskpart(NamedTuple):
    device: str
    mountpoint: str
    fstype: str
    opts: str
    maxfile: Optional[int]
    maxpath: Optional[int]

def disk_usage(path: str) -> sdiskusage: ...
def disk_partitions(all: bool = False) -> List[sdiskpart]: ...
def disk_io_counters(perdisk: bool = False, nowrap: bool = True) -> Optional[Union[Any, Dict[str, Any]]]: ...

# Network
def net_io_counters(pernic: bool = False, nowrap: bool = True) -> Optional[Union[Any, Dict[str, Any]]]: ...
def net_connections(kind: str = "inet") -> List[Any]: ...
def net_if_addrs() -> Dict[str, List[Any]]: ...
def net_if_stats() -> Dict[str, Any]: ...

# Sensors
def sensors_temperatures(fahrenheit: bool = False) -> Dict[str, List[Any]]: ...
def sensors_fans() -> Dict[str, List[Any]]: ...
def sensors_battery() -> Optional[Any]: ...

# Other system info
def boot_time() -> float: ...
def users() -> List[Any]: ...

# Process management
def pids() -> List[int]: ...
def pid_exists(pid: int) -> bool: ...
def process_iter(attrs: Optional[List[str]] = None, ad_value: Any = None) -> Iterator["Process"]: ...
def wait_procs(procs: List["Process"], timeout: Optional[float] = None, callback: Optional[Any] = None) -> tuple[List["Process"], List["Process"]]: ...

class Process:
    """Process class."""
    
    def __init__(self, pid: Optional[int] = None) -> None: ...
    
    @property
    def pid(self) -> int: ...
    
    def ppid(self) -> int: ...
    def parent(self) -> Optional["Process"]: ...
    def parents(self) -> List["Process"]: ...
    def children(self, recursive: bool = False) -> List["Process"]: ...
    def name(self) -> str: ...
    def exe(self) -> str: ...
    def cmdline(self) -> List[str]: ...
    def environ(self) -> Dict[str, str]: ...
    def create_time(self) -> float: ...
    def as_dict(self, attrs: Optional[List[str]] = None, ad_value: Any = None) -> Dict[str, Any]: ...
    def status(self) -> str: ...
    def cwd(self) -> str: ...
    def username(self) -> str: ...
    def uids(self) -> Any: ...
    def gids(self) -> Any: ...
    def terminal(self) -> Optional[str]: ...
    def nice(self, value: Optional[int] = None) -> int: ...
    def ionice(self, ioclass: Optional[int] = None, value: Optional[int] = None) -> Any: ...
    def rlimit(self, resource: int, limits: Optional[tuple[int, int]] = None) -> tuple[int, int]: ...
    def io_counters(self) -> Any: ...
    def num_ctx_switches(self) -> Any: ...
    def num_fds(self) -> int: ...
    def num_handles(self) -> int: ...
    def num_threads(self) -> int: ...
    def threads(self) -> List[Any]: ...
    def cpu_times(self) -> Any: ...
    def cpu_percent(self, interval: Optional[float] = None) -> float: ...
    def cpu_affinity(self, cpus: Optional[List[int]] = None) -> Optional[List[int]]: ...
    def cpu_num(self) -> int: ...
    def memory_info(self) -> Any: ...
    def memory_info_ex(self) -> Any: ...
    def memory_full_info(self) -> Any: ...
    def memory_percent(self, memtype: str = "rss") -> float: ...
    def memory_maps(self, grouped: bool = True) -> List[Any]: ...
    def open_files(self) -> List[Any]: ...
    def connections(self, kind: str = "inet") -> List[Any]: ...
    def is_running(self) -> bool: ...
    def send_signal(self, sig: int) -> None: ...
    def suspend(self) -> None: ...
    def resume(self) -> None: ...
    def terminate(self) -> None: ...
    def kill(self) -> None: ...
    def wait(self, timeout: Optional[float] = None) -> Optional[int]: ...
    def poll(self) -> Optional[int]: ...