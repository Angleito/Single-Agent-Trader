services:
  dashboard-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dashboard-backend-standalone
    ports:
      - "8000:8000"  # Allow external access for frontend connectivity
    volumes:
      # SECURITY FIX: Docker socket exposure removed - CRITICAL VULNERABILITY FIXED
      # - /var/run/docker.sock:/var/run/docker.sock:ro  # DANGEROUS - Removed for security
      - ./backend/logs:/app/logs
      - ./backend/data:/app/data
      # Access to trading bot logs and data when running alongside main compose
      - ../logs:/app/trading-logs:ro
      - ../data:/app/trading-data:ro

    # SECURITY HARDENING - Container Security
    user: "1000:1000"  # Run as non-root user
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:true  # Prevent privilege escalation
    cap_drop:
      - ALL             # Drop all capabilities
    cap_add:
      - NET_BIND_SERVICE  # Only add required capabilities
    tmpfs:
      - /tmp:noexec,nosuid,size=50m  # Secure temporary filesystem
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DOCKER_ENV=true
      # CORS origins for standalone operation
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000,http://127.0.0.1:3001,http://localhost:8080,http://127.0.0.1:8080
      - CORS_ALLOW_CREDENTIALS=false
      # Security settings
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_PER_MINUTE=60
      - SECURITY_HEADERS_ENABLED=true
      # Service discovery for trading bot connection (when available)
      - TRADING_BOT_CONTAINER=ai-trading-bot
      - EXCHANGE__EXCHANGE_TYPE=${EXCHANGE__EXCHANGE_TYPE:-coinbase}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - dashboard-network
      - trading-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  dashboard-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: dashboard-frontend-standalone
    ports:
      - "3000:8080"  # Allow external access for frontend

    # SECURITY HARDENING - Container Security (Temporarily relaxed for debugging)
    # user: "1000:1000"  # Run as non-root user - temporarily disabled
    # read_only: true     # Read-only root filesystem - temporarily disabled
    security_opt:
      - no-new-privileges:true  # Prevent privilege escalation
    # cap_drop:
    #   - ALL             # Drop all capabilities - temporarily disabled
    # tmpfs:
    #   - /tmp:noexec,nosuid,size=50m  # Secure temporary filesystem
    environment:
      - NODE_ENV=production
      - DOCKER_ENV=true
      # Use localhost URLs for browser-based frontend communication (direct backend access)
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000/ws
    restart: unless-stopped
    networks:
      - dashboard-network
      - trading-network
    depends_on:
      dashboard-backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production frontend service
  dashboard-frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: dashboard-frontend-prod-standalone
    ports:
      - "3001:8080"  # Allow external access for frontend

    # SECURITY HARDENING - Container Security
    user: "1000:1000"  # Run as non-root user
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:true  # Prevent privilege escalation
    cap_drop:
      - ALL             # Drop all capabilities
    tmpfs:
      - /tmp:noexec,nosuid,size=50m  # Secure temporary filesystem
    environment:
      - NODE_ENV=production
      # Use relative URLs for API calls - nginx proxy will handle routing
      - VITE_API_URL=/api
      - VITE_WS_URL=/api/ws
    restart: unless-stopped
    networks:
      - dashboard-network
      - trading-network
    depends_on:
      dashboard-backend:
        condition: service_healthy
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy for production
  dashboard-nginx:
    image: nginx:alpine
    container_name: dashboard-nginx-standalone
    ports:
      - "8080:80"  # Allow external access for nginx proxy

    # SECURITY HARDENING - Container Security
    user: "101:101"    # Run as nginx user
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:true  # Prevent privilege escalation
    cap_drop:
      - ALL             # Drop all capabilities
    cap_add:
      - NET_BIND_SERVICE  # Only add required capabilities
    tmpfs:
      - /tmp:noexec,nosuid,size=50m      # Secure temporary filesystem
      - /var/cache/nginx:noexec,nosuid,size=50m  # Nginx cache
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    restart: unless-stopped
    networks:
      - dashboard-network
      - trading-network
    depends_on:
      - dashboard-backend
      - dashboard-frontend-prod
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

volumes:
  dashboard-logs:
    name: dashboard-logs
  dashboard-data:
    name: dashboard-data
  node_modules:
    name: dashboard-node-modules

networks:
  # Internal dashboard network for service isolation
  dashboard-network:
    name: dashboard-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

  # Trading network for compatibility with main compose
  # Creates the network if it doesn't exist, uses existing if it does
  trading-network:
    name: trading-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
