# Docker Compose for Bluefin DEX Trading
# Use this file instead of docker-compose.yml when trading on Bluefin

services:
  ai-trading-bot-bluefin:
    build:
      context: .
      dockerfile: Dockerfile.bluefin
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-0.1.0}
    image: ai-trading-bot:bluefin-${VERSION:-latest}
    container_name: ai-trading-bot-bluefin
    restart: unless-stopped
    
    # Command for perpetual trading on Bluefin
    command: ["python", "-m", "bot.main", "live", "--no-dry-run", "--force", "--symbol", "ETH-PERP", "--interval", "5m"]
    
    # Environment variables from .env file
    env_file:
      - .env
    
    # Bluefin-specific environment overrides
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - CONFIG_FILE=/app/config/production.json
      # Force Bluefin exchange
      - EXCHANGE__EXCHANGE_TYPE=bluefin
      # System Configuration
      - SYSTEM__DRY_RUN=${SYSTEM__DRY_RUN:-true}  # Default to paper trading
      - SYSTEM__ENVIRONMENT=${SYSTEM__ENVIRONMENT:-production}
      # Bluefin network
      - EXCHANGE__BLUEFIN_NETWORK=${EXCHANGE__BLUEFIN_NETWORK:-mainnet}
      # Perpetual futures are always enabled on Bluefin
      - TRADING__ENABLE_FUTURES=true
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LLM__ENABLE_COMPLETION_LOGGING=${LLM_ENABLE_COMPLETION_LOGGING:-true}
      
    # Volume mounts
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config:ro
      
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s
      
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
          
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        
    networks:
      - bluefin-network

  # Optional: MCP Memory Server for learning (works with Bluefin)
  mcp-memory:
    build:
      context: ./bot/mcp
      dockerfile: Dockerfile
    image: mcp-memory-server:latest
    container_name: mcp-memory-server
    restart: unless-stopped
    profiles:
      - with-memory
    
    environment:
      - MCP_SERVER_PORT=8765
      - MEM0_API_KEY=${MEM0_API_KEY:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MEMORY_RETENTION_DAYS=${MCP_MEMORY_RETENTION_DAYS:-90}
      
    volumes:
      - ./data/mcp_memory:/app/data
      - ./logs/mcp:/app/logs
      
    ports:
      - "8765:8765"
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
      
    networks:
      - bluefin-network

networks:
  bluefin-network:
    name: bluefin-network
    driver: bridge

# Usage:
# 1. Build the Bluefin-specific image:
#    docker-compose -f docker-compose.bluefin.yml build
#
# 2. Run in paper trading mode (default):
#    docker-compose -f docker-compose.bluefin.yml up
#
# 3. Run in live trading mode (DANGEROUS - uses real money):
#    SYSTEM__DRY_RUN=false docker-compose -f docker-compose.bluefin.yml up
#
# 4. Run with memory/learning enabled:
#    docker-compose -f docker-compose.bluefin.yml --profile with-memory up