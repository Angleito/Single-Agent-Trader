# Docker Compose for AI Trading Bot with Encrypted Volumes
# This configuration uses LUKS encrypted volumes for secure data storage
#
# PREREQUISITES:
# 1. Run: sudo ./scripts/setup-encrypted-volumes.sh
# 2. Ensure encrypted volumes are mounted: systemctl start trading-bot-volumes
# 3. Verify mounts: df -h | grep trading
#
# SECURITY FEATURES:
# - All sensitive data stored on encrypted volumes
# - Read-only container filesystems
# - Minimal capabilities and security hardening
# - Encrypted bind mounts for persistent data
# - Secure temporary filesystems

version: '3.8'

services:
  # Bluefin SDK Service with Encrypted Storage
  bluefin-service:
    build:
      context: ./services
      dockerfile: Dockerfile.bluefin
      args:
        USER_ID: ${HOST_UID:-1000}
        GROUP_ID: ${HOST_GID:-1000}
        USERNAME: bluefin
    image: bluefin-sdk-service:encrypted
    container_name: bluefin-service-encrypted
    restart: unless-stopped

    # ENHANCED SECURITY HARDENING
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - seccomp:default
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Secure temporary filesystems
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=50m
      - /var/tmp:noexec,nosuid,nodev,size=25m
      - /run:noexec,nosuid,nodev,size=25m

    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONWARNINGS=ignore::UserWarning,ignore::DeprecationWarning
      - BLUEFIN_PRIVATE_KEY=${EXCHANGE__BLUEFIN_PRIVATE_KEY:-}
      - BLUEFIN_NETWORK=${EXCHANGE__BLUEFIN_NETWORK:-mainnet}
      - BLUEFIN_SERVICE_API_KEY=${BLUEFIN_SERVICE_API_KEY:-}
      - BLUEFIN_SERVICE_RATE_LIMIT=${BLUEFIN_SERVICE_RATE_LIMIT:-100}
      - HOST=0.0.0.0
      - PORT=8080
      - LOG_LEVEL=info
      # Encryption settings
      - ENABLE_ENCRYPTION=true
      - ENCRYPTION_AT_REST=true

    ports:
      - "127.0.0.1:8081:8080"

    # ENCRYPTED VOLUME MOUNTS
    volumes:
      # Use encrypted volumes for persistent data
      - /mnt/trading-logs:/app/logs:rw
      - /mnt/trading-data:/app/data:rw
      - /mnt/trading-config:/app/config:ro
      # Temporary encrypted storage
      - type: tmpfs
        target: /app/tmp
        tmpfs:
          size: 100m
          mode: 1777

    networks:
      trading-network:
        aliases:
          - bluefin-service
          - bluefin

    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "10", "--max-time", "15", "http://localhost:8080/health"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 30s

    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.15'
        reservations:
          memory: 256M
          cpus: '0.05'

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # AI Trading Bot with Encrypted Storage
  ai-trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-0.1.0}
        EXCHANGE_TYPE: ${EXCHANGE__EXCHANGE_TYPE:-bluefin}
        USER_ID: ${HOST_UID:-1000}
        GROUP_ID: ${HOST_GID:-1000}
    image: ai-trading-bot:encrypted-${VERSION:-latest}
    container_name: ai-trading-bot-encrypted
    restart: unless-stopped

    # ENHANCED SECURITY HARDENING
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - seccomp:default
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Secure temporary filesystems with encryption support
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=150m
      - /var/tmp:noexec,nosuid,nodev,size=50m
      - /run:noexec,nosuid,nodev,size=50m
      - /dev/shm:noexec,nosuid,nodev,size=100m

    command: ["python", "-m", "bot.main", "live", "--force"]

    env_file: .env

    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONWARNINGS=ignore::UserWarning,ignore::DeprecationWarning
      
      # Encryption configuration
      - ENABLE_ENCRYPTION=true
      - ENCRYPTION_AT_REST=true
      - ENCRYPTED_LOGS=true
      - ENCRYPTED_DATA=true
      - ENCRYPTED_CONFIG=true
      
      # Functional Programming Runtime Configuration
      - FP_RUNTIME_ENABLED=${FP_RUNTIME_ENABLED:-true}
      - FP_RUNTIME_MODE=${FP_RUNTIME_MODE:-hybrid}
      - FP_EFFECT_TIMEOUT=${FP_EFFECT_TIMEOUT:-20.0}
      - FP_MAX_CONCURRENT_EFFECTS=${FP_MAX_CONCURRENT_EFFECTS:-25}
      - FP_ERROR_RECOVERY=${FP_ERROR_RECOVERY:-true}
      - FP_METRICS_ENABLED=${FP_METRICS_ENABLED:-true}
      
      # Performance Monitoring
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
      - MONITOR_INTERVAL=${MONITOR_INTERVAL:-30}
      - METRICS_PORT=${METRICS_PORT:-9091}
      
      # System Configuration
      - SYSTEM__DRY_RUN=${SYSTEM__DRY_RUN:-true}
      - SYSTEM__ENVIRONMENT=${SYSTEM__ENVIRONMENT:-development}
      - EXCHANGE__EXCHANGE_TYPE=${EXCHANGE__EXCHANGE_TYPE:-bluefin}
      
      # MCP Memory Configuration
      - MCP_ENABLED=${MCP_ENABLED:-true}
      - MCP_SERVER_URL=http://mcp-memory:8765
      
      # WebSocket Publishing Configuration
      - SYSTEM__ENABLE_WEBSOCKET_PUBLISHING=${SYSTEM__ENABLE_WEBSOCKET_PUBLISHING:-true}
      - SYSTEM__WEBSOCKET_DASHBOARD_URL=${SYSTEM__WEBSOCKET_DASHBOARD_URL:-ws://dashboard-backend:8000/ws}
      
      # Security settings
      - SECURE_MODE=true
      - ENABLE_AUDIT_LOGGING=true
      - LOG_ENCRYPTION_KEY_ID=${LOG_ENCRYPTION_KEY_ID:-logs}

    # ENCRYPTED VOLUME MOUNTS
    volumes:
      # Use encrypted volumes for all persistent data
      - /mnt/trading-logs:/app/logs:rw
      - /mnt/trading-data:/app/data:rw
      - /mnt/trading-config:/app/config:rw
      # Read-only application code
      - ./bot:/app/bot:ro
      - ./prompts:/app/prompts:ro
      # Encrypted temporary storage
      - type: tmpfs
        target: /app/tmp
        tmpfs:
          size: 200m
          mode: 1777

    healthcheck:
      test: ["CMD-SHELL", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s

    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    networks:
      trading-network:
        aliases:
          - ai-trading-bot
          - trading-bot

    depends_on:
      - mcp-omnisearch
      - mcp-memory

  # MCP OmniSearch Server with Encrypted Storage
  mcp-omnisearch:
    build:
      context: ./bot/mcp/omnisearch-server
      dockerfile: Dockerfile
    image: mcp-omnisearch-server:encrypted
    container_name: mcp-omnisearch-encrypted
    restart: unless-stopped

    # ENHANCED SECURITY HARDENING
    read_only: true
    security_opt:
      - no-new-privileges:true
      - seccomp:default
      - apparmor:docker-default
    cap_drop:
      - ALL
    
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=75m
      - /var/tmp:noexec,nosuid,nodev,size=25m

    environment:
      - NODE_ENV=production
      - TAVILY_API_KEY=${TAVILY_API_KEY:-}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY:-}
      - KAGI_API_KEY=${KAGI_API_KEY:-}
      - JINA_AI_API_KEY=${JINA_AI_KEY:-}
      - BRAVE_API_KEY=${BRAVE_API_KEY:-}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY:-}
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-8767}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Encryption settings
      - ENABLE_ENCRYPTION=true
      - CACHE_ENCRYPTION=true

    env_file: .env

    # ENCRYPTED VOLUME MOUNTS
    volumes:
      - /mnt/trading-logs:/app/logs:rw

    ports:
      - "127.0.0.1:8767:8767"

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--timeout=5", "http://localhost:8767/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

    networks:
      trading-network:
        aliases:
          - mcp-omnisearch
          - omnisearch

    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.1'
        reservations:
          memory: 192M
          cpus: '0.03'

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MCP Memory Server with Encrypted Storage
  mcp-memory:
    build:
      context: ./bot/mcp
      dockerfile: Dockerfile
    image: mcp-memory-server:encrypted
    container_name: mcp-memory-encrypted
    restart: unless-stopped

    # ENHANCED SECURITY HARDENING
    read_only: true
    security_opt:
      - no-new-privileges:true
      - seccomp:default
      - apparmor:docker-default
    cap_drop:
      - ALL
    
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=75m
      - /var/tmp:noexec,nosuid,nodev,size=25m

    environment:
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-8765}
      - MCP_SERVER_HOST=0.0.0.0
      - MEM0_API_KEY=${MEM0_API_KEY:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MEMORY_RETENTION_DAYS=${MCP_MEMORY_RETENTION_DAYS:-90}
      # Encryption settings
      - ENABLE_ENCRYPTION=true
      - MEMORY_ENCRYPTION=true
      - ENCRYPT_SENSITIVE_DATA=true

    # ENCRYPTED VOLUME MOUNTS
    volumes:
      - /mnt/trading-data:/app/data:rw
      - /mnt/trading-logs:/app/logs:rw

    ports:
      - "127.0.0.1:8765:8765"

    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "http://localhost:8765/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

    networks:
      trading-network:
        aliases:
          - mcp-memory
          - memory-server

    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.1'
        reservations:
          memory: 192M
          cpus: '0.03'

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Dashboard Backend with Encrypted Storage
  dashboard-backend:
    build:
      context: ./dashboard/backend
      dockerfile: Dockerfile
    container_name: dashboard-backend-encrypted
    ports:
      - "8000:8000"

    # ENHANCED SECURITY HARDENING
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - seccomp:default
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=50m

    # ENCRYPTED VOLUME MOUNTS
    volumes:
      - /mnt/trading-logs:/app/logs:rw
      - /mnt/trading-data:/app/data:rw
      - /mnt/trading-logs:/app/trading-logs:ro
      - /mnt/trading-data:/app/trading-data:ro

    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=production
      - DASHBOARD_HOST=0.0.0.0
      - DASHBOARD_PORT=8000
      - TRADING_BOT_CONTAINER=ai-trading-bot-encrypted
      - DOCKER_ENV=true
      # Security settings
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000
      - CORS_ALLOW_CREDENTIALS=false
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_PER_MINUTE=60
      - SECURITY_HEADERS_ENABLED=true
      # Encryption settings
      - ENABLE_ENCRYPTION=true
      - API_ENCRYPTION=true
      - SENSITIVE_DATA_ENCRYPTION=true

    restart: unless-stopped
    depends_on:
      - bluefin-service
    
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "10", "http://localhost:8000/health"]
      interval: 45s
      timeout: 15s
      retries: 3
      start_period: 20s
    
    networks:
      trading-network:
        aliases:
          - dashboard-backend
          - api
    
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.1'
        reservations:
          memory: 192M
          cpus: '0.03'
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Dashboard Frontend with Security Hardening
  dashboard-frontend:
    build:
      context: ./dashboard/frontend
      dockerfile: Dockerfile
      target: production
    container_name: dashboard-frontend-encrypted
    ports:
      - "3000:8080"

    # ENHANCED SECURITY HARDENING
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - seccomp:default
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=100m

    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=/api
      - VITE_API_URL=/api
      - VITE_WS_URL=/api/ws
      - VITE_DOCKER_ENV=true
      # Security settings
      - ENABLE_CSP=true
      - SECURE_HEADERS=true
      - HTTPS_ONLY=false

    restart: unless-stopped
    
    networks:
      trading-network:
        aliases:
          - dashboard-frontend
          - frontend
    
    depends_on:
      - dashboard-backend
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.08'
        reservations:
          memory: 128M
          cpus: '0.02'
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service for Encrypted Data
  backup-service:
    image: alpine:latest
    container_name: backup-service
    restart: "no"
    
    # SECURITY HARDENING
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    read_only: true
    security_opt:
      - no-new-privileges:true
      - seccomp:default
      - apparmor:docker-default
    cap_drop:
      - ALL
    
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=100m

    environment:
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY:-}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - ENABLE_OFFSITE_BACKUP=${ENABLE_OFFSITE_BACKUP:-false}

    # ENCRYPTED VOLUME MOUNTS
    volumes:
      - /mnt/trading-data:/backup/data:ro
      - /mnt/trading-logs:/backup/logs:ro
      - /mnt/trading-config:/backup/config:ro
      - /mnt/trading-backup:/backup/output:rw
      - ./scripts/backup-encrypted.sh:/backup/backup-encrypted.sh:ro

    command: |
      sh -c '
        apk add --no-cache gnupg tar gzip openssh-client
        crond -f -d 8
      '

    networks:
      trading-network:
        aliases:
          - backup-service

    profiles:
      - backup

    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  trading-network:
    name: trading-network-encrypted
    driver: bridge
    driver_opts:
      encrypted: "true"

# Note: No Docker volumes defined as we're using encrypted bind mounts
# All persistent data is stored on LUKS encrypted volumes