version: '3.8'

# Memory-optimized Docker Compose for low-memory systems (1GB RAM)
# This configuration reduces resource usage and builds services sequentially

services:
  # Core AI Trading Bot - Main application
  ai-trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.12
    image: ai-trading-bot:latest
    container_name: ai-trading-bot
    restart: unless-stopped
    depends_on:
      - bluefin-service
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      - ./.env:/app/.env:ro
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SYSTEM__DRY_RUN=${SYSTEM__DRY_RUN:-true}
    env_file:
      - .env
    networks:
      - trading-network
    # Memory limits for low-memory systems
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "python", "-c", "import bot"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Bluefin Service - DEX Integration
  bluefin-service:
    build:
      context: .
      dockerfile: services/Dockerfile.bluefin
      args:
        - PYTHON_VERSION=3.12
    image: bluefin-service:latest
    container_name: bluefin-service
    restart: unless-stopped
    ports:
      - "${BLUEFIN_SERVICE_PORT:-8082}:8080"
    environment:
      - BLUEFIN_PRIVATE_KEY=${EXCHANGE__BLUEFIN_PRIVATE_KEY:-0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef}
      - BLUEFIN_SERVICE_API_KEY=${BLUEFIN_SERVICE_API_KEY}
      - EXCHANGE__BLUEFIN_NETWORK=${EXCHANGE__BLUEFIN_NETWORK:-testnet}
      - SYSTEM__DRY_RUN=${SYSTEM__DRY_RUN:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs/bluefin:/app/logs:rw
    networks:
      - trading-network
    # Reduced memory footprint
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Dashboard Backend - Web API
  dashboard-backend:
    build:
      context: ./dashboard/backend
      dockerfile: Dockerfile
    image: dashboard-backend:latest
    container_name: dashboard-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DASHBOARD_HOST=0.0.0.0
      - DASHBOARD_PORT=8000
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs:ro
      - ./data:/app/data:ro
    networks:
      - trading-network
    # Increased memory for API to prevent exhaustion
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Dashboard Frontend - Web UI (optional for memory-constrained systems)
  dashboard-frontend:
    build:
      context: ./dashboard/frontend
      dockerfile: Dockerfile
      target: production
    image: dashboard-frontend:latest
    container_name: dashboard-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - dashboard-backend
    networks:
      - trading-network
    # Nginx is lightweight
    deploy:
      resources:
        limits:
          memory: 32M
        reservations:
          memory: 16M
    profiles:
      - full  # Only start with --profile full

  # MCP Memory Service (optional)
  mcp-memory:
    build:
      context: ./bot/mcp/memory
      dockerfile: Dockerfile
    image: mcp-memory:latest
    container_name: mcp-memory
    restart: unless-stopped
    ports:
      - "8765:8765"
    environment:
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8765
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./data/mcp_memory:/app/data:rw
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M
    profiles:
      - full  # Only start with --profile full

  # MCP OmniSearch Service (optional - memory intensive)
  mcp-omnisearch:
    build:
      context: ./bot/mcp/omnisearch-server
      dockerfile: Dockerfile
    image: mcp-omnisearch:latest
    container_name: mcp-omnisearch
    restart: unless-stopped
    ports:
      - "8766:8766"
    environment:
      - OMNISEARCH_SERVER_HOST=0.0.0.0
      - OMNISEARCH_SERVER_PORT=8766
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # API keys for search services
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - BRAVE_API_KEY=${BRAVE_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    profiles:
      - full  # Only start with --profile full

networks:
  trading-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450

volumes:
  logs:
    driver: local
  data:
    driver: local
