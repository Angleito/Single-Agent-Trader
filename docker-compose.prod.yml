# Production Docker Compose for AI Trading Bot
# This is optimized for production deployment with security and performance

services:
  ai-trading-bot:
    image: ai-trading-bot:latest
    container_name: ai-trading-bot-prod
    restart: always

    # Environment variables from .env file (optional)
    # env_file:
    #   - .env.production

    # Production environment overrides
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONWARNINGS=ignore::UserWarning,ignore::DeprecationWarning,ignore::SyntaxWarning,ignore::FutureWarning
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      - SYSTEM__DRY_RUN=${SYSTEM__DRY_RUN:-true}  # Default to paper trading (safe mode)
      - TRADING__SYMBOL=${TRADING__SYMBOL:-BTC-USD}
      # LLM Logging Configuration (reduced verbosity for production)
      - LLM__ENABLE_COMPLETION_LOGGING=${LLM_ENABLE_COMPLETION_LOGGING:-false}
      - LLM__COMPLETION_LOG_LEVEL=${LLM_COMPLETION_LOG_LEVEL:-WARNING}
      - LLM__COMPLETION_LOG_FILE=${LLM_COMPLETION_LOG_FILE:-logs/llm_completions.log}
      - LLM__ENABLE_PERFORMANCE_TRACKING=${LLM_ENABLE_PERFORMANCE_TRACKING:-false}
      - LLM__ENABLE_LANGCHAIN_CALLBACKS=${LLM_ENABLE_LANGCHAIN_CALLBACKS:-false}
      - LLM__LOG_MARKET_CONTEXT=${LLM_LOG_MARKET_CONTEXT:-false}

    # Production volume mounts (read-only where possible)
    volumes:
      - trading-logs:/app/logs
      - trading-data:/app/data
      - ./config:/app/config:ro

    # Health check configuration
    healthcheck:
      test: ["CMD-SHELL", "/app/healthcheck.sh"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

    # Logging configuration with rotation
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

    # Production command
    command: ["python", "-m", "bot.main", "live"]

    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: false  # Bot needs to write to logs and data
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

    networks:
      - trading-network

  # Dashboard Backend Service (Production)
  dashboard-backend:
    image: dashboard-backend:latest
    container_name: dashboard-backend-prod
    restart: always

    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only for security

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - dashboard-logs:/app/logs
      - dashboard-data:/app/data
      - trading-logs:/app/trading-logs:ro
      - trading-data:/app/trading-data:ro

    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - TRADING_BOT_CONTAINER=ai-trading-bot-prod

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

    depends_on:
      ai-trading-bot:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

    networks:
      - trading-network

  # Dashboard Frontend Service (Production Only)
  dashboard-frontend:
    image: dashboard-frontend:latest
    container_name: dashboard-frontend-prod
    restart: always

    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://dashboard-backend:8000
      - VITE_WS_URL=ws://dashboard-backend:8000

    depends_on:
      dashboard-backend:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/cache/nginx:noexec,nosuid,size=50m

    networks:
      - trading-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    restart: always

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates

    depends_on:
      - dashboard-backend
      - dashboard-frontend

    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=50m

    networks:
      - trading-network

volumes:
  # Named volumes for production data persistence
  trading-logs:
    name: trading-bot-logs-prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trading-bot/logs

  trading-data:
    name: trading-bot-data-prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trading-bot/data

  dashboard-logs:
    name: dashboard-logs-prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trading-bot/dashboard/logs

  dashboard-data:
    name: dashboard-data-prod
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trading-bot/dashboard/data

networks:
  trading-network:
    name: trading-network-prod
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-trading-prod
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
