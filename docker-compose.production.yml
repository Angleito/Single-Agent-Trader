# Production Docker Compose Configuration
# Optimized for production deployment with security hardening and resource limits
#
# USAGE:
# docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d
#
# This file overrides settings in docker-compose.yml for production use

services:
  # Bluefin SDK Service - Production Configuration
  bluefin-service:
    restart: always
    
    # Enhanced security for production
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined      # VPS compatibility
      - apparmor:unconfined     # Ubuntu AppArmor compatibility
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE        # Network binding only
      - CHOWN                   # File ownership operations
      - FOWNER                  # File ownership checks
      - FSETID                  # File permission setting
    
    # Production resource limits - Memory optimized
    deploy:
      resources:
        limits:
          memory: 384M          # Reduced for memory efficiency
          cpus: '0.2'          # CPU allocation for production
        reservations:
          memory: 256M
          cpus: '0.1'
    
    # Production environment
    environment:
      - SYSTEM__ENVIRONMENT=production
      - LOG_LEVEL=WARNING       # Reduced logging for performance
      - PYTHONOPTIMIZE=2        # Optimize Python for production
      - MALLOC_TRIM_THRESHOLD_=100000  # Memory optimization
      
    # Disable debug port in production
    ports: []
    
    # Production health check - more aggressive
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "--max-time", "10", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 45s
    
    # Production logging - reduced size
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
        compress: "true"

  # AI Trading Bot - Production Configuration  
  ai-trading-bot:
    restart: always
    
    # Production command - ensure live mode
    command: ["python", "-m", "bot.main", "live", "--force"]
    
    # Enhanced security for production
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined      # VPS compatibility
      - apparmor:unconfined     # Ubuntu AppArmor compatibility
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE        # Network operations
      - CHOWN                   # File ownership operations
      - FOWNER                  # File ownership checks
      - FSETID                  # File permission setting
      - DAC_OVERRIDE           # File access (required for some operations)
    
    # Production resource limits - Optimized for single-core VPS
    deploy:
      resources:
        limits:
          memory: 768M          # Primary service allocation
          cpus: '0.7'          # 70% CPU for main service
        reservations:
          memory: 512M
          cpus: '0.4'
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 5
        window: 120s
    
    # Production environment
    environment:
      # System configuration
      - SYSTEM__ENVIRONMENT=production
      - SYSTEM__DRY_RUN=${SYSTEM__DRY_RUN:-true}  # Default to paper trading for safety
      - LOG_LEVEL=WARNING
      - PYTHONOPTIMIZE=2
      - MALLOC_TRIM_THRESHOLD_=100000
      
      # Production FP Runtime - Optimized settings
      - FP_RUNTIME_ENABLED=true
      - FP_RUNTIME_MODE=hybrid
      - FP_EFFECT_TIMEOUT=30.0
      - FP_MAX_CONCURRENT_EFFECTS=50
      - FP_ERROR_RECOVERY=true
      - FP_METRICS_ENABLED=true
      - FP_DEBUG_MODE=false
      
      # Performance optimization
      - SYSTEM__MAX_CONCURRENT_TASKS=6
      - SYSTEM__THREAD_POOL_SIZE=4
      - SYSTEM__ASYNC_TIMEOUT=20.0
      - SYSTEM__TASK_BATCH_SIZE=3
      
      # Monitoring thresholds
      - ALERT_CPU_WARNING=80
      - ALERT_CPU_CRITICAL=90
      - ALERT_MEMORY_WARNING=85
      - ALERT_MEMORY_CRITICAL=95
      
      # Disable non-essential features
      - MCP_ENABLED=false
      - SYSTEM__ENABLE_WEBSOCKET_PUBLISHING=false
      - LLM__ENABLE_LANGCHAIN_CALLBACKS=false
      - LLM__ENABLE_COMPLETION_LOGGING=false
    
    # Production health check
    healthcheck:
      test: ["CMD-SHELL", "/app/healthcheck.sh || exit 1"]
      interval: 60s
      timeout: 20s
      retries: 5
      start_period: 90s
    
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
        labels: "service=ai-trading-bot,env=production"
    
    # Production ulimits
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 4096
        hard: 4096
    
    # System tuning
    sysctls:
      - net.ipv4.ip_local_port_range=1024 65535
      - net.ipv4.tcp_tw_reuse=1
      - net.core.somaxconn=1024

  # MCP OmniSearch - Production Configuration
  mcp-omnisearch:
    restart: always
    
    # Enhanced security
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
      - apparmor:unconfined
    cap_drop:
      - ALL
    
    # Production resource limits - Minimal allocation
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'
    
    # Production environment
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=WARNING
      - MCP_SERVER_PORT=8767
      
    # Disable external port in production
    ports: []
    
    # Production health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--timeout=3", "http://localhost:8767/health"]
      interval: 90s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    # Production logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
        compress: "true"

# Production network configuration
networks:
  trading-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"  # Disable inter-container communication
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1450  # Optimize for cloud providers
    ipam:
      config:
        - subnet: 172.30.0.0/24
          gateway: 172.30.0.1

# Production volume configuration
volumes:
  # Named volumes for better management
  fp-runtime-state:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/fp_runtime
      
  fp-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/fp