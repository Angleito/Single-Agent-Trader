version: '3.8'

# Security-Enhanced Docker Compose Configuration
# This configuration implements defense-in-depth security measures

x-security-options: &security-options
  security_opt:
    - no-new-privileges:true
    - seccomp:./docker/security/seccomp-trading-bot.json
    - apparmor:docker-ai-trading-bot
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - SETUID
    - SETGID
    - DAC_OVERRIDE
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100m
    - /var/tmp:noexec,nosuid,size=50m

x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        cpus: '2'
        memory: 2G
      reservations:
        cpus: '0.5'
        memory: 512M

x-healthcheck: &healthcheck
  healthcheck:
    test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 40s

services:
  ai-trading-bot:
    <<: [*security-options, *resource-limits, *healthcheck]
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - UID=${HOST_UID:-1000}
        - GID=${HOST_GID:-1000}
    image: ai-trading-bot:secure
    container_name: ai-trading-bot-secure
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    environment:
      # Use secrets instead of environment variables
      - SECRETS_ENABLED=true
      - PYTHONUNBUFFERED=1
      - LOG_SANITIZATION=true
      - SECURE_MODE=true
    env_file:
      - .env.secure
    volumes:
      # Read-only app directory
      - ./bot:/app/bot:ro
      - ./prompts:/app/prompts:ro
      - ./config:/app/config:ro
      # Writable directories with specific permissions
      - ai-trading-logs:/app/logs:rw
      - ai-trading-data:/app/data:rw
    networks:
      - ai-trading-secure
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=ai-trading-bot"
    labels:
      - "com.ai-trading-bot.security=enhanced"
      - "com.ai-trading-bot.version=${VERSION:-latest}"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 4096
        hard: 4096
    sysctls:
      - net.ipv4.ip_local_port_range=1024 65535
      - net.ipv4.tcp_tw_reuse=1

  mcp-memory-secure:
    <<: [*security-options, *resource-limits, *healthcheck]
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
      args:
        - UID=${HOST_UID:-1000}
        - GID=${HOST_GID:-1000}
    image: mcp-memory:secure
    container_name: mcp-memory-secure
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    environment:
      - SECRETS_ENABLED=true
      - PYTHONUNBUFFERED=1
      - LOG_SANITIZATION=true
      - MCP_SECURE_MODE=true
    volumes:
      - ./bot/mcp:/app:ro
      - mcp-memory-data:/data:rw
    networks:
      - ai-trading-secure
    expose:
      - "8765"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-memory"

  # Security monitoring sidecar
  security-monitor:
    <<: [*security-options, *resource-limits]
    image: alpine:3.19
    container_name: security-monitor
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    command: |
      sh -c '
      while true; do
        # Monitor for suspicious activity
        echo "[$(date)] Security check running..."

        # Check for unauthorized file changes
        find /app -type f -newer /tmp/last_check 2>/dev/null | grep -v "/logs/" | grep -v "/data/" > /tmp/changes
        if [ -s /tmp/changes ]; then
          echo "[ALERT] Unauthorized file changes detected:"
          cat /tmp/changes
        fi

        # Update timestamp
        touch /tmp/last_check

        # Check resource usage
        ps aux | awk '\''$3 > 80 || $4 > 80 {print "[ALERT] High resource usage:", $0}'\''

        # Sleep for monitoring interval
        sleep 300
      done
      '
    volumes:
      - ./bot:/app:ro
      - security-logs:/logs:rw
    tmpfs:
      - /tmp:noexec,nosuid,size=10m
    networks:
      - ai-trading-secure
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # WAF/Proxy for additional security
  security-proxy:
    <<: [*security-options, *resource-limits]
    image: nginx:alpine
    container_name: security-proxy
    volumes:
      - ./docker/security/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/security/ssl:/etc/nginx/ssl:ro
    networks:
      - ai-trading-secure
      - ai-trading-external
    ports:
      - "127.0.0.1:8443:443"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  ai-trading-secure:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      config:
        - subnet: 172.30.0.0/24

  ai-trading-external:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: "true"

volumes:
  ai-trading-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

  ai-trading-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data

  mcp-memory-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./mcp_data

  security-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./security_logs

# Security configurations to apply:
# 1. Run: docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions
# 2. Load AppArmor profile: sudo apparmor_parser -r ./docker/security/apparmor-trading-bot
# 3. Initialize Docker Swarm for secrets: docker swarm init
# 4. Create secrets: ./scripts/security/manage-docker-secrets.sh
# 5. Deploy with: docker-compose -f docker-compose.secure.yml -f docker-compose.secrets.yml up -d
