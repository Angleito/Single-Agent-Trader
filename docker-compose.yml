# Docker Compose for AI Trading Bot with Dashboard
#
# PLATFORM COMPATIBILITY:
# - All services explicitly target linux/amd64 for X64 Linux deployment
# - Build contexts specify platforms to ensure consistent builds
# - Runtime platform specifications prevent architecture conflicts
#
# USER PERMISSIONS:
# - Services use host user mapping via HOST_UID and HOST_GID environment variables
# - Volume permissions are handled by matching container users to host user
# - If volume permission errors occur, run: ./setup-docker-permissions.sh
# - This script sets up directories and updates .env with correct UID/GID values
#
# DEPLOYMENT NOTES:
# - Use: DOCKER_DEFAULT_PLATFORM=linux/amd64 docker-compose up
# - For building: docker-compose build --platform linux/amd64
# - All Dockerfiles include --platform=linux/amd64 specifications
# - Recommended: Run ./setup-docker-permissions.sh first, then docker-compose up

services:
  # Bluefin SDK Service - Isolated container for Bluefin DEX operations
  bluefin-service:
    build:
      context: ./services
      dockerfile: Dockerfile.bluefin
      platforms:
        - linux/amd64
      args:
        USER_ID: ${HOST_UID:-1000}
        GROUP_ID: ${HOST_GID:-1000}
        USERNAME: bluefin
    image: bluefin-sdk-service:latest
    platform: linux/amd64
    container_name: bluefin-service
    restart: unless-stopped

    # SECURITY HARDENING - VPS-optimized Container Security (Balanced for functionality)
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"  # Run as host user for volume permissions
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:false  # Allow privilege operations for VPS compatibility
      - seccomp:unconfined      # Disable seccomp restrictions for VPS
      - apparmor:unconfined     # Ubuntu AppArmor compatibility
    cap_drop:
      - ALL             # Drop all capabilities
    cap_add:
      - NET_BIND_SERVICE  # Network binding capability
      - SYS_ADMIN       # Required for Ubuntu container operations
      - CHOWN           # File ownership operations
      - FOWNER          # File ownership checks
      - FSETID          # File permission setting
    tmpfs:
      - /tmp:noexec,nosuid,size=50m  # Secure temporary filesystem
      - /var/tmp:noexec,nosuid,size=25m  # Ubuntu additional temp space
      - /app/data:exec,suid,size=100m    # Writable data directory in tmpfs
      - /app/tmp:exec,suid,size=50m      # Writable temp directory in tmpfs

    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - BLUEFIN_PRIVATE_KEY=${EXCHANGE__BLUEFIN_PRIVATE_KEY:-}
      - BLUEFIN_NETWORK=${EXCHANGE__BLUEFIN_NETWORK:-mainnet}
      - EXCHANGE__BLUEFIN_NETWORK=${EXCHANGE__BLUEFIN_NETWORK:-mainnet}
      - BLUEFIN_SERVICE_API_KEY=${BLUEFIN_SERVICE_API_KEY:-}
      - BLUEFIN_SERVICE_RATE_LIMIT=${BLUEFIN_SERVICE_RATE_LIMIT:-100}
      # DOCKER NETWORKING FIX: Ensure service binds to all interfaces
      - HOST=0.0.0.0
      - PORT=8080
      - LOG_LEVEL=info
      - EXPECTED_USER=bluefin
      - EXPECTED_GROUP=bluefin
      # Additional networking diagnostics
      - DOCKER_CONTAINER_NAME=bluefin-service
      - DOCKER_NETWORK_MODE=bridge

    ports:
      - "127.0.0.1:8081:8080"  # SECURITY: Bind to localhost only for debugging

    # Volume mounts for persistent data
    volumes:
      - ./logs/bluefin:/app/logs

    networks:
      trading-network:
        aliases:
          - bluefin-service
          - bluefin

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

    deploy:
      resources:
        limits:
          memory: 768M      # Increased for Ubuntu optimization
          cpus: '0.4'       # Increased for Ubuntu processes
        reservations:
          memory: 384M      # Increased baseline for Ubuntu
          cpus: '0.15'      # Higher baseline for Ubuntu

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ai-trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-0.1.0}
        EXCHANGE_TYPE: coinbase
        USER_ID: ${HOST_UID:-1000}
        GROUP_ID: ${HOST_GID:-1000}
    image: ai-trading-bot:coinbase-${VERSION:-latest}
    platform: linux/amd64
    container_name: ai-trading-bot
    restart: unless-stopped

    # SECURITY HARDENING - VPS-optimized Container Security (Balanced for functionality)
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"  # Run as host user for volume permissions
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:false  # Allow privilege operations for VPS compatibility
      - seccomp:unconfined      # Disable seccomp restrictions for VPS
      - apparmor:unconfined     # Ubuntu AppArmor compatibility
    cap_drop:
      - ALL             # Drop all capabilities
    cap_add:
      - NET_BIND_SERVICE  # Network binding capability
      - SYS_ADMIN       # Required for Ubuntu container operations
      - CHOWN           # File ownership operations
      - FOWNER          # File ownership checks
      - FSETID          # File permission setting
    tmpfs:
      - /tmp:noexec,nosuid,size=150m  # System temp space only
      - /var/tmp:noexec,nosuid,size=50m   # System temp space only
      # Note: /app/data and /app/logs are mounted as volumes, not tmpfs

    # Override the default command - TRADING MODE WITH 1-MINUTE INTERVALS
    # Note: dry-run mode is controlled by SYSTEM__DRY_RUN environment variable
    # Note: Symbol should match the exchange type (BTC-USD for Coinbase, SUI-PERP for Bluefin)
    command: ["python", "-m", "bot.main", "live", "--symbol", "SUI-PERP", "--interval", "15s", "--force"]

    # Environment variables from .env file (optional - uses defaults if missing)
    env_file:
      - path: .env
        required: false

    # Docker-specific environment overrides (minimal set to avoid conflicts with .env)
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONWARNINGS=ignore::UserWarning,ignore::DeprecationWarning,ignore::SyntaxWarning,ignore::FutureWarning
      - CONFIG_FILE=${CONFIG_FILE:-}
      # Functional Programming Runtime Configuration
      - FP_RUNTIME_ENABLED=${FP_RUNTIME_ENABLED:-true}
      - FP_RUNTIME_MODE=${FP_RUNTIME_MODE:-hybrid}
      - FP_EFFECT_TIMEOUT=${FP_EFFECT_TIMEOUT:-30.0}
      - FP_MAX_CONCURRENT_EFFECTS=${FP_MAX_CONCURRENT_EFFECTS:-100}
      - FP_ERROR_RECOVERY=${FP_ERROR_RECOVERY:-true}
      - FP_METRICS_ENABLED=${FP_METRICS_ENABLED:-true}
      - FP_SCHEDULER_ENABLED=${FP_SCHEDULER_ENABLED:-true}
      - FP_ASYNC_RUNTIME=${FP_ASYNC_RUNTIME:-true}
      - FP_INTERPRETER_STATS=${FP_INTERPRETER_STATS:-true}
      - FP_DEBUG_MODE=${FP_DEBUG_MODE:-false}
      # System Configuration
      - SYSTEM__DRY_RUN=${SYSTEM__DRY_RUN:-true}   # PAPER TRADING MODE - SAFE (MAINNET DATA)
      - SYSTEM__ENVIRONMENT=${SYSTEM__ENVIRONMENT:-development}  # Development environment for paper trading
      # Exchange Configuration - Use setting from .env file
      - EXCHANGE__CB_SANDBOX=${EXCHANGE__CB_SANDBOX:-true}  # Use setting from .env file
      - EXCHANGE__BLUEFIN_NETWORK=${EXCHANGE__BLUEFIN_NETWORK:-mainnet}  # Network configuration for Bluefin
      - BLUEFIN_USE_REAL_DATA=${BLUEFIN_USE_REAL_DATA:-true}
      - BLUEFIN_SERVICE_URL=${BLUEFIN_SERVICE_URL:-http://bluefin-service:8080}
      - BLUEFIN_SERVICE_API_KEY=${BLUEFIN_SERVICE_API_KEY:-}
      # LLM Logging Configuration
      - LLM__ENABLE_COMPLETION_LOGGING=${LLM__ENABLE_COMPLETION_LOGGING:-true}
      - LLM__COMPLETION_LOG_LEVEL=${LLM__COMPLETION_LOG_LEVEL:-INFO}
      - LLM__COMPLETION_LOG_FILE=${LLM__COMPLETION_LOG_FILE:-logs/llm_completions.log}
      - LLM__ENABLE_PERFORMANCE_TRACKING=${LLM__ENABLE_PERFORMANCE_TRACKING:-true}
      - LLM__ENABLE_LANGCHAIN_CALLBACKS=${LLM__ENABLE_LANGCHAIN_CALLBACKS:-true}
      - LLM__LOG_MARKET_CONTEXT=${LLM__LOG_MARKET_CONTEXT:-true}
      # MCP Memory Configuration
      - MCP_ENABLED=${MCP_ENABLED:-true}
      - MCP_SERVER_URL=http://mcp-memory:8765
      # WebSocket Publishing Configuration - Enhanced connection resilience for dashboard integration
      - SYSTEM__ENABLE_WEBSOCKET_PUBLISHING=${SYSTEM__ENABLE_WEBSOCKET_PUBLISHING:-true}
      - SYSTEM__WEBSOCKET_DASHBOARD_URL=${SYSTEM__WEBSOCKET_DASHBOARD_URL:-ws://dashboard-backend:8000/ws}
      - SYSTEM__WEBSOCKET_FALLBACK_URLS=${SYSTEM__WEBSOCKET_FALLBACK_URLS:-ws://localhost:8000/ws,ws://127.0.0.1:8000/ws}
      - SYSTEM__WEBSOCKET_PUBLISH_INTERVAL=${SYSTEM__WEBSOCKET_PUBLISH_INTERVAL:-1.0}
      - SYSTEM__WEBSOCKET_MAX_RETRIES=${SYSTEM__WEBSOCKET_MAX_RETRIES:-15}
      - SYSTEM__WEBSOCKET_RETRY_DELAY=${SYSTEM__WEBSOCKET_RETRY_DELAY:-5}
      - SYSTEM__WEBSOCKET_TIMEOUT=${SYSTEM__WEBSOCKET_TIMEOUT:-45}
      - SYSTEM__WEBSOCKET_INITIAL_CONNECT_TIMEOUT=${SYSTEM__WEBSOCKET_INITIAL_CONNECT_TIMEOUT:-60}
      - SYSTEM__WEBSOCKET_QUEUE_SIZE=${SYSTEM__WEBSOCKET_QUEUE_SIZE:-500}
      - SYSTEM__WEBSOCKET_PING_INTERVAL=${SYSTEM__WEBSOCKET_PING_INTERVAL:-20}
      - SYSTEM__WEBSOCKET_PING_TIMEOUT=${SYSTEM__WEBSOCKET_PING_TIMEOUT:-10}
      - SYSTEM__WEBSOCKET_HEALTH_CHECK_INTERVAL=${SYSTEM__WEBSOCKET_HEALTH_CHECK_INTERVAL:-45}
      - SYSTEM__WEBSOCKET_CONNECTION_DELAY=${SYSTEM__WEBSOCKET_CONNECTION_DELAY:-10}
      # Logging Level
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # OmniSearch Configuration
      - OMNISEARCH__ENABLED=${OMNISEARCH__ENABLED:-true}
      - OMNISEARCH__SERVER_URL=${OMNISEARCH__SERVER_URL:-http://mcp-omnisearch:8767}

    # SECURITY: Volume mounts with minimal required access including FP runtime support
    volumes:
      - ./logs:/app/logs:rw       # Writable logs only
      - ./data:/app/data:rw       # Writable data only
      - ./config:/app/config:ro   # Read-only config mount
      - ./bot:/app/bot:ro         # Read-only code mount
      # Functional Programming Runtime Volumes
      - fp-runtime-state:/app/data/fp_runtime:rw    # FP runtime state persistence
      - fp-logs:/app/logs/fp:rw                     # FP-specific logging
      - ./data/fp_runtime/config:/app/data/fp_runtime/config:rw  # FP config persistence

    # Health check configuration
    healthcheck:
      test: ["CMD-SHELL", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s

    # Ubuntu-optimized resource limits
    deploy:
      resources:
        limits:
          memory: 1.5G      # Increased for Ubuntu optimization
          cpus: '0.8'       # Increased for Ubuntu processes
        reservations:
          memory: 768M      # Higher baseline for Ubuntu
          cpus: '0.4'       # Higher baseline for Ubuntu processes

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"


    # Connect to shared network for dashboard communication
    networks:
      trading-network:
        aliases:
          - ai-trading-bot
          - trading-bot

    # Service dependencies with health check conditions for robust startup
    # Optional dependencies - services will start even if MCP services are unavailable
    depends_on:
      mcp-omnisearch:
        condition: service_started
        required: false
      mcp-memory:
        condition: service_started
        required: false

  # MCP OmniSearch Server for Enhanced Market Intelligence
  mcp-omnisearch:
    build:
      context: ./bot/mcp/omnisearch-server
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
    image: mcp-omnisearch-server:latest
    platform: linux/amd64
    container_name: mcp-omnisearch-server
    restart: unless-stopped

    # SECURITY HARDENING - VPS-optimized Container Security
    # Note: Using built-in 'mcp' user from Dockerfile instead of host user override
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:false  # Allow privilege operations for VPS compatibility
      - seccomp:unconfined      # Disable seccomp restrictions for VPS
      - apparmor:unconfined     # Ubuntu AppArmor compatibility
    cap_drop:
      - ALL             # Drop all capabilities
    tmpfs:
      - /tmp:noexec,nosuid,size=75m   # Increased for Ubuntu optimization
      - /var/tmp:noexec,nosuid,size=25m  # Ubuntu additional temp space

    environment:
      - NODE_ENV=production
      # Search Provider API Keys (optional - only providers with keys will be enabled)
      - TAVILY_API_KEY=${TAVILY_API_KEY:-}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY:-}
      - KAGI_API_KEY=${KAGI_API_KEY:-}
      - JINA_AI_API_KEY=${JINA_AI_API_KEY:-}
      - BRAVE_API_KEY=${BRAVE_API_KEY:-}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY:-}
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-8767}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

    env_file:
      - path: .env
        required: false

    volumes:
      - ./logs/mcp:/app/logs

    ports:
      - "127.0.0.1:8767:8767"  # SECURITY: Bind to localhost only

    healthcheck:
      test: ["CMD", "node", "-e", "console.log('MCP OmniSearch Ready')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    networks:
      trading-network:
        aliases:
          - mcp-omnisearch
          - omnisearch

    deploy:
      resources:
        limits:
          memory: 768M      # Increased for Ubuntu optimization
          cpus: '0.4'       # Increased for Ubuntu processes
        reservations:
          memory: 384M      # Increased baseline for Ubuntu
          cpus: '0.15'      # Higher baseline for Ubuntu

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MCP Memory Server for AI Learning
  mcp-memory:
    build:
      context: ./bot/mcp
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
    image: mcp-memory-server:latest
    platform: linux/amd64
    container_name: mcp-memory-server
    restart: unless-stopped

    # SECURITY HARDENING - VPS-optimized Container Security
    # Note: Using built-in 'memoryserver' user from Dockerfile instead of host user override
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:false  # Allow privilege operations for VPS compatibility
      - seccomp:unconfined      # Disable seccomp restrictions for VPS
      - apparmor:unconfined     # Ubuntu AppArmor compatibility
    cap_drop:
      - ALL             # Drop all capabilities
    tmpfs:
      - /tmp:noexec,nosuid,size=75m   # Increased for Ubuntu optimization
      - /var/tmp:noexec,nosuid,size=25m  # Ubuntu additional temp space

    environment:
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-8765}
      - MEM0_API_KEY=${MEM0_API_KEY:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MEMORY_RETENTION_DAYS=${MCP_MEMORY_RETENTION_DAYS:-90}

    volumes:
      - ./data/mcp_memory:/app/data
      - ./logs/mcp:/app/logs

    ports:
      - "127.0.0.1:8765:8765"  # SECURITY: Bind to localhost only

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    networks:
      trading-network:
        aliases:
          - mcp-memory
          - memory-server

    deploy:
      resources:
        limits:
          memory: 768M      # Increased for Ubuntu optimization
          cpus: '0.4'       # Increased for Ubuntu processes
        reservations:
          memory: 384M      # Increased baseline for Ubuntu
          cpus: '0.15'      # Higher baseline for Ubuntu

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Dashboard Backend Service
  dashboard-backend:
    build:
      context: ./dashboard/backend
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
    container_name: dashboard-backend
    platform: linux/amd64
    ports:
      - "8000:8000"  # Allow external access for frontend connectivity

    # SECURITY HARDENING - Container Security
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"  # Run as host user for volume permissions
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:true  # Prevent privilege escalation
    cap_drop:
      - ALL             # Drop all capabilities
    cap_add:
      - NET_BIND_SERVICE  # Only add required capabilities
    tmpfs:
      - /tmp:noexec,nosuid,size=50m  # Secure temporary filesystem
    volumes:
      # REMOVED: Docker socket exposure - SECURITY VULNERABILITY FIXED
      # - /var/run/docker.sock:/var/run/docker.sock:ro  # DANGEROUS - Docker socket exposure removed
      - ./dashboard/backend/logs:/app/logs
      - ./dashboard/backend/data:/app/data
      - ./logs:/app/trading-logs:ro  # Access to trading bot logs
      - ./data:/app/trading-data:ro  # Access to trading bot data
      # Access to LLM completion logs for dashboard analytics
      - ./logs:/app/llm-logs:ro
      - ./logs:/app/decision-logs:ro
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - TRADING_BOT_CONTAINER=ai-trading-bot
      - DOCKER_ENV=true
      # SECURITY: Comprehensive CORS origins for container and browser connectivity
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000,http://127.0.0.1:3001,http://localhost:8080,http://127.0.0.1:8080,http://localhost:8000,http://127.0.0.1:8000,http://dashboard-frontend:8080,http://dashboard-frontend-prod:8080,http://dashboard-backend:8000,ws://localhost:8000,ws://127.0.0.1:8000
      - CORS_ALLOW_CREDENTIALS=false
      # SECURITY: Rate limiting and security headers
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_PER_MINUTE=60
      - SECURITY_HEADERS_ENABLED=true
      # Bluefin service configuration
      - BLUEFIN_SERVICE_URL=${BLUEFIN_SERVICE_URL:-http://bluefin-service:8080}
      - BLUEFIN_SERVICE_API_KEY=${BLUEFIN_SERVICE_API_KEY:-}
      # Exchange type for dashboard configuration
      - EXCHANGE__EXCHANGE_TYPE=${EXCHANGE__EXCHANGE_TYPE:-coinbase}
    restart: unless-stopped
    depends_on:
      bluefin-service:
        condition: service_started
        required: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      trading-network:
        aliases:
          - dashboard-backend
          - api
    deploy:
      resources:
        limits:
          memory: 768M      # Increased for Ubuntu optimization
          cpus: '0.4'       # Increased for Ubuntu processes
        reservations:
          memory: 384M      # Increased baseline for Ubuntu
          cpus: '0.15'      # Higher baseline for Ubuntu
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Dashboard Frontend Service (Production)
  dashboard-frontend:
    build:
      context: ./dashboard/frontend
      dockerfile: Dockerfile
      target: production
      platforms:
        - linux/amd64
    container_name: dashboard-frontend
    platform: linux/amd64
    ports:
      - "3000:8080"  # Allow external access for frontend

    # SECURITY HARDENING - Container Security
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"  # Run as host user for volume permissions
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:true  # Prevent privilege escalation
    cap_drop:
      - ALL             # Drop all capabilities
    cap_add:
      - NET_BIND_SERVICE  # Only add required capabilities
    tmpfs:
      - /tmp:noexec,nosuid,size=50m  # Secure temporary filesystem
    environment:
      - NODE_ENV=production
      # Use relative URLs for API calls - nginx proxy will handle routing
      - VITE_API_BASE_URL=/api
      - VITE_API_URL=/api
      - VITE_WS_URL=/api/ws
      - VITE_DOCKER_ENV=true
    restart: unless-stopped
    networks:
      trading-network:
        aliases:
          - dashboard-frontend
          - frontend
    depends_on:
      - dashboard-backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Dashboard Frontend Service (Production)
  dashboard-frontend-prod:
    build:
      context: ./dashboard/frontend
      dockerfile: Dockerfile
      target: production
      platforms:
        - linux/amd64
    container_name: dashboard-frontend-prod
    platform: linux/amd64
    ports:
      - "3001:8080"  # Allow external access for frontend

    # SECURITY HARDENING - VPS-optimized Container Security
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"  # Run as host user for volume permissions
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:false  # Allow privilege operations for VPS compatibility
      - seccomp:unconfined      # Disable seccomp restrictions for VPS
      - apparmor:unconfined     # Ubuntu AppArmor compatibility
    cap_drop:
      - ALL             # Drop all capabilities
    tmpfs:
      - /tmp:noexec,nosuid,size=75m   # Increased for Ubuntu optimization
      - /var/tmp:noexec,nosuid,size=25m  # Ubuntu additional temp space
    environment:
      - NODE_ENV=production
      # Use relative URLs for API calls - nginx proxy will handle routing
      - VITE_API_URL=/api
      - VITE_WS_URL=/api/ws
      - VITE_DOCKER_ENV=true
    restart: unless-stopped
    networks:
      trading-network:
        aliases:
          - dashboard-frontend-prod
          - frontend-prod
    depends_on:
      - dashboard-backend
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy for production
  dashboard-nginx:
    image: nginx:alpine
    container_name: dashboard-nginx
    platform: linux/amd64
    ports:
      - "8080:80"  # Allow external access for nginx proxy

    # SECURITY HARDENING - Container Security
    user: "101:101"    # Run as nginx user
    read_only: true     # Read-only root filesystem
    security_opt:
      - no-new-privileges:true  # Prevent privilege escalation
    cap_drop:
      - ALL             # Drop all capabilities
    cap_add:
      - NET_BIND_SERVICE  # Only add required capabilities
    tmpfs:
      - /tmp:noexec,nosuid,size=50m      # Secure temporary filesystem
      - /var/cache/nginx:noexec,nosuid,size=50m  # Nginx cache
    volumes:
      - ./dashboard/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./dashboard/nginx/conf.d:/etc/nginx/conf.d:ro
    restart: unless-stopped
    networks:
      trading-network:
        aliases:
          - dashboard-nginx
          - nginx
          - proxy
    depends_on:
      - dashboard-backend
      - dashboard-frontend-prod
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Development service (optional) - use with: docker-compose --profile dev up
  ai-trading-bot-dev:
    extends: ai-trading-bot
    container_name: ai-trading-bot-dev
    profiles:
      - dev
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DEBUG=true
      - TESTING=true
      - SYSTEM__DRY_RUN=true
      # Enhanced FP debugging for development
      - FP_DEBUG_MODE=true
      - FP_INTERPRETER_STATS=true
      - FP_EFFECT_LOGGING=true
      - FP_SCHEDULER_DEBUG=true
    volumes:
      - .:/app:delegated  # Mount entire project for development
    networks:
      trading-network:
        aliases:
          - ai-trading-bot-dev
          - trading-bot-dev
    command: ["python", "-m", "bot.main", "live", "--symbol", "BTC-USD"]

  # Functional Programming Development Service - Enhanced FP testing and debugging
  ai-trading-bot-fp-dev:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-0.1.0}
        EXCHANGE_TYPE: coinbase
        USER_ID: ${HOST_UID:-1000}
        GROUP_ID: ${HOST_GID:-1000}
        FP_ENABLED: true
        FP_RUNTIME_MODE: pure
    image: ai-trading-bot:fp-dev-${VERSION:-latest}
    platform: linux/amd64
    container_name: ai-trading-bot-fp-dev
    restart: "no"
    profiles:
      - fp-dev
    user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DEBUG=true
      - TESTING=true
      - SYSTEM__DRY_RUN=true
      # Pure Functional Programming Mode for testing
      - FP_RUNTIME_ENABLED=true
      - FP_RUNTIME_MODE=pure
      - FP_DEBUG_MODE=true
      - FP_INTERPRETER_STATS=true
      - FP_EFFECT_LOGGING=true
      - FP_SCHEDULER_DEBUG=true
      - FP_ADAPTER_DEBUG=true
      - FP_TEST_MODE=true
      # Reduced resource limits for development
      - FP_MAX_CONCURRENT_EFFECTS=50
      - FP_EFFECT_TIMEOUT=60.0
    volumes:
      - .:/app:delegated  # Mount entire project for development
      - fp-dev-logs:/app/logs/fp:rw
      - fp-dev-state:/app/data/fp_runtime:rw
    networks:
      trading-network:
        aliases:
          - ai-trading-bot-fp-dev
          - fp-dev
    command: ["python", "-m", "bot.fp.runtime.cli", "live", "--symbol", "BTC-USD", "--debug"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # VPS deployment service (optional) - use with: docker-compose --profile vps up
  # This service demonstrates VPS configuration within the main compose file
  ai-trading-bot-vps:
    extends: ai-trading-bot
    container_name: ai-trading-bot-vps-demo
    profiles:
      - vps
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - VPS_DEPLOYMENT=true
      - GEOGRAPHIC_REGION=${GEOGRAPHIC_REGION:-US}
      - SYSTEM__DRY_RUN=${SYSTEM__DRY_RUN:-true}
      - CONFIG_FILE=/app/config/vps_production.json
      - MONITORING__ENABLED=true
      - BACKUP_ENABLED=true
      # VPS-optimized FP Runtime Configuration
      - FP_RUNTIME_ENABLED=${FP_RUNTIME_ENABLED:-true}
      - FP_RUNTIME_MODE=${FP_RUNTIME_MODE:-hybrid}
      - FP_MAX_CONCURRENT_EFFECTS=${FP_MAX_CONCURRENT_EFFECTS:-150}
      - FP_EFFECT_TIMEOUT=${FP_EFFECT_TIMEOUT:-45.0}
      - FP_ERROR_RECOVERY=true
      - FP_METRICS_ENABLED=true
      - FP_SCHEDULER_ENABLED=true
      - FP_DEBUG_MODE=false
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config:ro
      - ./scripts/vps-healthcheck.sh:/app/vps-healthcheck.sh:ro
    networks:
      trading-network:
        aliases:
          - ai-trading-bot-vps-demo
          - trading-bot-vps-demo
    command: ["python", "-m", "bot.main", "live", "--symbol", "SUI-PERP", "--interval", "30s", "--force"]
    healthcheck:
      test: ["CMD-SHELL", "/app/vps-healthcheck.sh ai-trading-bot"]
      interval: 45s
      timeout: 20s
      retries: 5
      start_period: 60s
    labels:
      - "com.vps.service=ai-trading-bot"
      - "com.vps.monitoring=enabled"
      - "com.vps.demo=true"

volumes:
  # Dashboard data persistence (trading bot uses bind mounts)
  dashboard-logs:
    name: dashboard-logs
  dashboard-data:
    name: dashboard-data
  dashboard-node-modules:
    name: dashboard-node-modules
  # Functional Programming Runtime Volumes
  fp-runtime-state:
    name: fp-runtime-state
    driver: local
  fp-logs:
    name: fp-logs
    driver: local
  fp-metrics:
    name: fp-metrics
    driver: local
  # FP Development Volumes
  fp-dev-logs:
    name: fp-dev-logs
    driver: local
  fp-dev-state:
    name: fp-dev-state
    driver: local

networks:
  trading-network:
    name: trading-network
    driver: bridge
