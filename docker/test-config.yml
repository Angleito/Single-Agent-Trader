# E2E Test Configuration for VuManChu Docker Testing
#
# This configuration file defines test parameters, resource limits,
# and validation criteria for comprehensive E2E testing

# Test Suite Configuration
test_suite:
  name: "VuManChu E2E Docker Tests"
  version: "1.0.0"
  description: "Comprehensive end-to-end testing suite for VuManChu implementation"
  
# Test Environment Settings
environment:
  docker_required: true
  python_version: "3.12+"
  memory_limit_mb: 2048
  cpu_limit: 2.0
  disk_space_required_gb: 5
  
# Test Data Configuration
test_data:
  scenarios:
    - name: "default"
      description: "Normal market conditions"
      periods: [1000, 5000, 10000]
      
    - name: "trending"
      description: "Strong trending markets"
      periods: [1000, 5000, 10000]
      trend_strength: 0.002
      
    - name: "ranging"
      description: "Sideways market conditions"
      periods: [1000, 5000, 10000]
      range_size: 0.05
      
    - name: "volatile"
      description: "High volatility conditions"
      periods: [1000, 5000, 10000]
      volatility_factor: 2.5
      
    - name: "gap_data"
      description: "Markets with gaps and extreme moves"
      periods: [1000, 5000, 10000]
      gap_frequency: 200
      
    - name: "low_volume"
      description: "Low volume trading conditions"
      periods: [1000, 5000, 10000]
      volume_factor: 0.3

# Performance Test Criteria
performance:
  scalability:
    # Throughput requirements (rows per second)
    small_dataset_min_throughput: 1000  # <= 500 rows
    medium_dataset_min_throughput: 500   # 501-2000 rows
    large_dataset_min_throughput: 200    # > 2000 rows
    
    # Processing time limits (seconds)
    max_processing_time: 30
    
  memory:
    # Memory usage limits (MB)
    max_memory_increase: 200
    max_peak_memory: 500
    memory_leak_threshold: 50  # MB increase per iteration
    
  concurrent:
    max_concurrent_tasks: 3
    concurrent_timeout_seconds: 60

# Signal Quality Validation
signal_quality:
  frequency_limits:
    min_signal_frequency: 0.01  # 1% of periods
    max_signal_frequency: 0.30  # 30% of periods
    
  signal_types:
    required_cipher_a_signals:
      - "red_diamond"
      - "green_diamond"
      - "yellow_cross"
    
    required_cipher_b_signals:
      - "buy_circle"
      - "sell_circle"
      - "gold_buy"
    
  confidence_thresholds:
    min_signal_confidence: 0.0
    max_signal_confidence: 100.0
    
  timing_validation:
    min_signal_interval_minutes: 10
    max_signal_interval_minutes: 500

# Integration Test Configuration
integration:
  components:
    - name: "IndicatorCalculator"
      required: true
      timeout_seconds: 30
      
    - name: "LLMTradingAgent"
      required: false  # Optional if API keys available
      timeout_seconds: 60
      
    - name: "RiskManager"
      required: true
      timeout_seconds: 10
      
    - name: "TradeValidator"
      required: true
      timeout_seconds: 5
      
    - name: "CoreStrategy"
      required: true
      timeout_seconds: 30
  
  market_symbols:
    - "BTC-USD"
    - "ETH-USD"
    - "DOGE-USD"

# Error Recovery Test Configuration
error_recovery:
  malformed_data_tests:
    - type: "missing_columns"
      description: "Data with missing required columns"
      
    - type: "nan_values"
      description: "Data with NaN values"
      
    - type: "infinite_values"
      description: "Data with infinite values"
      
    - type: "empty_dataframe"
      description: "Empty DataFrame"
      
    - type: "insufficient_data"
      description: "Single row DataFrame"
  
  resource_exhaustion:
    test_data_sizes: [1000, 5000, 10000, 20000]
    memory_warning_threshold_mb: 800
    max_test_size: 50000
    
  timeout_simulation:
    request_timeout_ms: 1
    network_timeout_tests: true

# Docker Environment Validation
docker:
  health_checks:
    - name: "volume_mounts"
      description: "Verify volume mounts are accessible"
      directories:
        - "/app/test_data"
        - "/app/test_results"
        - "/app/logs"
    
    - name: "networking"
      description: "Verify networking configuration"
      test_ports: [8080, 8081, 8082]
    
    - name: "resource_limits"
      description: "Verify resource limits"
      min_memory_gb: 0.5
      min_cpu_cores: 1
      min_disk_gb: 1
  
  log_configuration:
    max_log_size_mb: 50
    max_log_files: 5
    log_level: "INFO"

# Test Results Configuration
results:
  output_formats:
    - "junit_xml"
    - "json_summary"
    - "html_coverage"
    - "performance_charts"
  
  export_paths:
    host_results: "/app/host_results"
    container_results: "/app/test_results"
    
  retention:
    keep_results_days: 7
    compress_old_results: true

# Validation Thresholds
validation:
  pine_script_accuracy:
    parameter_match_tolerance: 0.001
    formula_accuracy_tolerance: 0.1
    timing_accuracy_tolerance_ms: 100
    
  backward_compatibility:
    required_legacy_methods: true
    output_format_consistency: true
    
  production_readiness:
    all_tests_pass: true
    performance_criteria_met: true
    memory_efficiency_validated: true
    error_handling_complete: true

# Test Profiles
profiles:
  quick:
    scenarios: ["default"]
    data_sizes: [1000]
    skip_performance: false
    skip_integration: true
    
  standard:
    scenarios: ["default", "trending", "ranging"]
    data_sizes: [1000, 5000]
    skip_performance: false
    skip_integration: false
    
  comprehensive:
    scenarios: ["default", "trending", "ranging", "volatile", "gap_data"]
    data_sizes: [1000, 5000, 10000]
    skip_performance: false
    skip_integration: false
    
  performance_only:
    scenarios: ["default"]
    data_sizes: [1000, 5000, 10000, 20000]
    skip_functional: true
    skip_integration: true
    
  integration_only:
    scenarios: ["default"]
    data_sizes: [1000]
    skip_performance: true
    skip_functional: true