user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Security: Hide nginx version
    server_tokens off;

    # Security: Prevent clickjacking
    add_header X-Frame-Options "SAMEORIGIN" always;

    # Security: Enable XSS protection
    add_header X-XSS-Protection "1; mode=block" always;

    # Security: Prevent MIME-type sniffing
    add_header X-Content-Type-Options "nosniff" always;

    # Security: Referrer policy
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Security: Content Security Policy - TradingView compatible
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://s3.tradingview.com https://charting-library.tradingview-widget.com https://unpkg.com; style-src 'self' 'unsafe-inline' https://s3.tradingview.com https://charting-library.tradingview-widget.com; img-src 'self' data: blob: https://s3.tradingview.com https://charting-library.tradingview-widget.com; font-src 'self' data: https://s3.tradingview.com; frame-src 'self' https://s.tradingview.com https://s3.tradingview.com https://charting-library.tradingview-widget.com https://www.tradingview-widget.com https://widget.tradingview.com; connect-src 'self' https://s3.tradingview.com https://charting-library.tradingview-widget.com ws://localhost:* wss://localhost:* http://localhost:*; worker-src 'self' blob:; object-src 'none'; base-uri 'self';" always;

    # Security: HSTS (uncomment when using HTTPS)
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # WebSocket connection upgrade mapping
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Logging with anonymized IPs
    map $remote_addr $remote_addr_anon {
        ~(?P<ip>\d+\.\d+\.\d+)\.    $ip.0;
        ~(?P<ip>[^:]+:[^:]+):       $ip::;
        default                      0.0.0.0;
    }

    log_format main_anon '$remote_addr_anon - $remote_user [$time_local] "$request" '
                         '$status $body_bytes_sent "$http_referer" '
                         '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main_anon;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10m;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=websocket_limit:10m rate=10r/m;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Upstream servers for unified network
    upstream backend {
        least_conn;
        server dashboard-backend:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream frontend {
        server dashboard-frontend:8080 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # HTTP server - redirect to HTTPS in production
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Security headers
        include /etc/nginx/security-headers.conf;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
        }

        # Frontend
        location / {
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn conn_limit 100;

            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # API endpoints
        location /api {
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn conn_limit 50;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS headers handled by backend
        }

        # WebSocket endpoints
        location ~ ^/(ws|api/ws) {
            limit_req zone=websocket_limit burst=5 nodelay;
            limit_conn conn_limit 20;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket timeouts (extended for persistent connections)
            proxy_connect_timeout 10s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;

            # Keep-alive for WebSocket connections
            proxy_socket_keepalive on;

            # Disable buffering for WebSocket
            proxy_buffering off;
            proxy_cache off;
            proxy_request_buffering off;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # HTTPS server (uncomment and configure for production)
    # server {
    #     listen 443 ssl http2 default_server;
    #     listen [::]:443 ssl http2 default_server;
    #     server_name yourdomain.com;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #
    #     # Copy all location blocks from HTTP server above
    # }
}
