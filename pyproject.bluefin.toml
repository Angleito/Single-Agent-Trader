[project]
name = "ai-trading-bot-bluefin"
version = "0.1.0"
description = "AI-powered crypto trading bot with Bluefin DEX support"
readme = "README.md"
requires-python = ">=3.11,<3.12"
license = {text = "MIT"}
authors = [
    {name = "AI Trading Bot", email = "admin@ai-trading-bot.com"},
]
keywords = ["trading", "crypto", "ai", "bluefin", "dex", "sui"]

dependencies = [
    # Core dependencies
    "pydantic>=2.9.2",
    "pydantic-settings>=2.9.1",
    "python-dotenv>=1.1.0",
    "click>=8.1.8",
    "rich>=13.9.4",
    
    # LLM and AI
    "openai>=1.86.0",
    "langchain>=0.2.17",
    "langchain-openai>=0.1.25",
    "tiktoken>=0.9.0",
    
    # Exchange APIs
    "coinbase-advanced-py>=1.8.2",
    
    # Data and Analysis
    "pandas>=2.3.0",
    "numpy>=1.26.4",
    "pandas-ta>=0.3.14b",
    "scipy>=1.15.3",
    
    # Async and Networking
    "aiohttp==3.8.6",  # Pinned for Bluefin compatibility
    "aiofiles>=24.1.0",
    "websockets>=12.0",
    "websocket-client==1.6.4",  # Pinned for Bluefin
    "httpx>=0.28.1",
    "backoff>=2.2.1",
    "python-socketio>=5.8.0,<6.0.0",  # Compatible with Bluefin SDK
    "python-engineio>=4.6.0,<4.7.0",  # Required by Bluefin SDK
    
    # Utilities
    "psutil>=6.1.1",
    "docker>=7.1.0",
    
    # Bluefin specific dependencies - let UV resolve versions
    "bluefin-v2-client==3.2.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.2",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "mypy>=1.8.0",
    "black>=24.11.0",
    "ruff>=0.9.1",
    "pre-commit>=4.0.1",
]

[project.scripts]
ai-trading-bot = "bot.main:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["bot"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-third-party = ["pydantic", "pandas", "numpy"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["bot"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]