[tool.poetry]
name = "ai-trading-bot"
version = "0.1.0"
description = "AI-assisted crypto futures trading bot for Coinbase with VuManChu Cipher indicators"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "bot"}]

[tool.poetry.dependencies]
python = "^3.12"
pip = "^24.0.0"
setuptools = "^69.0.0"
pandas = "^2.2.0"
numpy = "^1.26.0"
pandas-ta = "^0.3.14b0"
scipy = "^1.11.0"
langchain = "^0.2.0"
langchain-openai = "^0.1.0"
pydantic = "^2.6.0"
pydantic-settings = "^2.2.0"
python-dotenv = "^1.0.0"
coinbase-advanced-py = "^1.3.0"
# bluefin-v2-client = "^4.2.13"  # Install separately in Docker due to build complexity
openai = "^1.12.0"
click = "^8.1.7"
websockets = "^12.0"
aiohttp = ">=3.8.5,<4.0.0"
rich = "^13.7.0"
requests = "^2.31.0"
docker = "^7.1.0"
websocket-client = "1.6.4"
psutil = "^6.1.0"
aiofiles = "^24.0.0"
python-socketio = "5.8.0"
aiohappyeyeballs = "^2.6.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.12.0"
python-dateutil = "^2.8.0"
black = "^24.0.0"
ruff = "^0.3.0"
pre-commit = "^3.6.0"
mypy = "^1.8.0"
types-requests = "^2.31.0"
types-aiofiles = "^24.1.0"
types-python-dateutil = "^2.9.0"
memory-profiler = "^0.61.0"
safety = "^3.5.2"
bandit = "^1.7.0"
vulture = "^2.13.0"
djlint = "^1.35.0"

[tool.poetry.scripts]
ai-trading-bot = "bot.main:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "FA",  # flake8-future-annotations
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate (commented-out code)
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy-specific rules
    "ASYNC", # flake8-async
    "FURB", # refurb
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "S101",   # use of assert
    "S603",   # subprocess call: check for execution of untrusted input
    "S607",   # starting a process with a partial executable path
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "COM812", # trailing comma missing (handled by formatter)
    "ISC001", # implicitly concatenated string literals (handled by formatter)
    "TRY003", # avoid specifying long messages outside the exception class
    "EM101",  # exception must not use a string literal
    "EM102",  # exception must not use an f-string literal
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR2004", "ARG001", "ARG002"]

[tool.ruff.lint.isort]
known-first-party = ["bot"]
force-single-line = false
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[tool.vulture]
min_confidence = 95
paths = ["bot"]
ignore_decorators = ["@pytest.fixture", "@property", "@cached_property", "@click.command", "@click.option"]
ignore_names = ["_*", "test_*", "setUp", "tearDown"]

[tool.djlint]
profile = "html"
max_line_length = 88
format_attribute_template_tags = true
preserve_leading_space = true
preserve_blank_lines = true
indent = 2
exclude = "node_modules,*.min.html"
extension = "html"

[tool.mypy]
python_version = "3.12"
check_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_return_any = false
strict_equality = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["bot"]
omit = ["tests/*", "bot/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
