# AlertManager Configuration for Falco Security Monitoring
# Handles routing and delivery of security alerts from Falco

global:
  # SMTP configuration for email alerts
  smtp_smarthost: '${EMAIL_SMTP_SERVER:-localhost}:${EMAIL_SMTP_PORT:-587}'
  smtp_from: '${EMAIL_USERNAME:-noreply@trading-bot.local}'
  smtp_auth_username: '${EMAIL_USERNAME:-}'
  smtp_auth_password: '${EMAIL_PASSWORD:-}'
  smtp_require_tls: true

# Template definitions for alerts
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Alert routing configuration
route:
  # Default receiver for all alerts
  receiver: 'default-alerts'
  
  # Group alerts by rule and container
  group_by: ['rule', 'container']
  
  # Wait for alerts to accumulate before sending
  group_wait: 10s
  group_interval: 30s
  repeat_interval: 1h
  
  # Route specific alert types to appropriate channels
  routes:
    # Critical security alerts - immediate notification
    - match:
        priority: 'CRITICAL'
      receiver: 'critical-security-alerts'
      group_wait: 5s
      group_interval: 10s
      repeat_interval: 15m
    
    # Emergency alerts - immediate notification via multiple channels
    - match:
        priority: 'EMERGENCY'
      receiver: 'emergency-alerts'
      group_wait: 0s
      group_interval: 0s
      repeat_interval: 5m
    
    # Trading-specific alerts
    - match:
        tags: 'trading'
      receiver: 'trading-security-alerts'
      group_wait: 15s
      group_interval: 1m
      repeat_interval: 30m
    
    # Financial data protection alerts
    - match:
        tags: 'financial'
      receiver: 'financial-security-alerts'
      group_wait: 10s
      group_interval: 30s
      repeat_interval: 20m
    
    # Container security alerts
    - match:
        tags: 'container'
      receiver: 'container-security-alerts'
      group_wait: 20s
      group_interval: 2m
      repeat_interval: 1h
    
    # Low priority informational alerts
    - match:
        priority: 'INFORMATIONAL'
      receiver: 'audit-logs'
      group_wait: 5m
      group_interval: 30m
      repeat_interval: 24h

# Alert receivers configuration
receivers:
  # Default receiver for unmatched alerts
  - name: 'default-alerts'
    email_configs:
      - to: '${SECURITY_EMAIL_TO:-admin@trading-bot.local}'
        subject: '[Trading Bot Security] {{ .GroupLabels.rule }}'
        body: |
          Security Alert Detected:
          
          Rule: {{ .GroupLabels.rule }}
          Priority: {{ .GroupLabels.priority }}
          Container: {{ .GroupLabels.container }}
          Time: {{ .GroupLabels.time }}
          
          Details:
          {{ range .Alerts }}
          - {{ .Annotations.output }}
          {{ end }}
          
          Please investigate immediately.
    
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#trading-security-alerts'
        username: 'Falco Security Monitor'
        icon_emoji: ':shield:'
        title: 'Trading Bot Security Alert'
        text: |
          üîí Security Alert: {{ .GroupLabels.rule }}
          Priority: {{ .GroupLabels.priority }}
          Container: {{ .GroupLabels.container }}
          
          {{ range .Alerts }}
          {{ .Annotations.output }}
          {{ end }}
        send_resolved: true

  # Critical security alerts - multiple notification channels
  - name: 'critical-security-alerts'
    email_configs:
      - to: '${SECURITY_EMAIL_TO:-admin@trading-bot.local}'
        subject: '[CRITICAL] Trading Bot Security Breach'
        body: |
          üö® CRITICAL SECURITY ALERT üö®
          
          A critical security event has been detected in the trading bot infrastructure.
          
          Rule: {{ .GroupLabels.rule }}
          Priority: {{ .GroupLabels.priority }}
          Container: {{ .GroupLabels.container }}
          Time: {{ .GroupLabels.time }}
          
          Event Details:
          {{ range .Alerts }}
          - {{ .Annotations.output }}
          {{ end }}
          
          IMMEDIATE ACTION REQUIRED:
          1. Check container status
          2. Review security logs
          3. Isolate affected containers if necessary
          4. Investigate root cause
          
          Trading Bot Security Monitor
    
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#trading-security-critical'
        username: 'Falco Critical Alert'
        icon_emoji: ':rotating_light:'
        title: 'üö® CRITICAL SECURITY ALERT'
        text: |
          **CRITICAL SECURITY BREACH DETECTED**
          
          Rule: {{ .GroupLabels.rule }}
          Priority: {{ .GroupLabels.priority }}
          Container: {{ .GroupLabels.container }}
          
          **Event Details:**
          {{ range .Alerts }}
          {{ .Annotations.output }}
          {{ end }}
          
          **IMMEDIATE ACTION REQUIRED**
        color: 'danger'
        send_resolved: true
    
    # PagerDuty integration for critical alerts
    pagerduty_configs:
      - routing_key: '${PAGERDUTY_INTEGRATION_KEY}'
        description: 'Critical security alert in trading bot: {{ .GroupLabels.rule }}'
        severity: 'critical'
        source: 'falco-security-monitor'
        component: '{{ .GroupLabels.container }}'
        group: 'trading-bot-security'
        details:
          rule: '{{ .GroupLabels.rule }}'
          priority: '{{ .GroupLabels.priority }}'
          container: '{{ .GroupLabels.container }}'
          output: '{{ range .Alerts }}{{ .Annotations.output }}{{ end }}'

  # Emergency alerts - immediate notification
  - name: 'emergency-alerts'
    email_configs:
      - to: '${SECURITY_EMAIL_TO:-admin@trading-bot.local}'
        subject: '[EMERGENCY] Trading Bot Security Emergency'
        body: |
          üÜò EMERGENCY SECURITY SITUATION üÜò
          
          An emergency security event has been detected that requires immediate attention.
          
          Rule: {{ .GroupLabels.rule }}
          Container: {{ .GroupLabels.container }}
          Time: {{ .GroupLabels.time }}
          
          Emergency Details:
          {{ range .Alerts }}
          - {{ .Annotations.output }}
          {{ end }}
          
          EMERGENCY RESPONSE REQUIRED:
          1. STOP all trading operations immediately
          2. Isolate affected containers
          3. Preserve forensic evidence
          4. Contact security team
          5. Begin incident response procedures
    
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#trading-security-emergency'
        username: 'EMERGENCY ALERT'
        icon_emoji: ':sos:'
        title: 'üÜò SECURITY EMERGENCY'
        text: |
          **EMERGENCY SECURITY SITUATION**
          
          Rule: {{ .GroupLabels.rule }}
          Container: {{ .GroupLabels.container }}
          
          **Emergency Details:**
          {{ range .Alerts }}
          {{ .Annotations.output }}
          {{ end }}
          
          **STOP ALL TRADING OPERATIONS**
          **INITIATE INCIDENT RESPONSE**
        color: '#FF0000'
        send_resolved: true

  # Trading-specific security alerts
  - name: 'trading-security-alerts'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#trading-security'
        username: 'Trading Security Monitor'
        icon_emoji: ':moneybag:'
        title: 'Trading Bot Security Alert'
        text: |
          üí∞ Trading Security Alert: {{ .GroupLabels.rule }}
          
          Container: {{ .GroupLabels.container }}
          Priority: {{ .GroupLabels.priority }}
          
          {{ range .Alerts }}
          {{ .Annotations.output }}
          {{ end }}
        color: 'warning'
        send_resolved: true

  # Financial data protection alerts
  - name: 'financial-security-alerts'
    email_configs:
      - to: '${SECURITY_EMAIL_TO:-admin@trading-bot.local}'
        subject: '[Financial Security] Data Protection Alert'
        body: |
          Financial Data Security Alert
          
          Rule: {{ .GroupLabels.rule }}
          Priority: {{ .GroupLabels.priority }}
          Container: {{ .GroupLabels.container }}
          
          Details:
          {{ range .Alerts }}
          - {{ .Annotations.output }}
          {{ end }}
          
          Please review financial data access and verify authorized operations.
    
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#financial-security'
        username: 'Financial Data Monitor'
        icon_emoji: ':bank:'
        title: 'Financial Data Security Alert'
        text: |
          üè¶ Financial Data Alert: {{ .GroupLabels.rule }}
          
          Container: {{ .GroupLabels.container }}
          Priority: {{ .GroupLabels.priority }}
          
          {{ range .Alerts }}
          {{ .Annotations.output }}
          {{ end }}
        color: '#FFA500'
        send_resolved: true

  # Container security alerts
  - name: 'container-security-alerts'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#container-security'
        username: 'Container Security Monitor'
        icon_emoji: ':whale:'
        title: 'Container Security Alert'
        text: |
          üê≥ Container Security Alert: {{ .GroupLabels.rule }}
          
          Container: {{ .GroupLabels.container }}
          Priority: {{ .GroupLabels.priority }}
          
          {{ range .Alerts }}
          {{ .Annotations.output }}
          {{ end }}
        color: '#0099CC'
        send_resolved: true

  # Audit logs for informational alerts
  - name: 'audit-logs'
    email_configs:
      - to: '${AUDIT_EMAIL_TO:-audit@trading-bot.local}'
        subject: '[Audit] Trading Bot Security Audit'
        body: |
          Trading Bot Security Audit Log
          
          Rule: {{ .GroupLabels.rule }}
          Container: {{ .GroupLabels.container }}
          Time: {{ .GroupLabels.time }}
          
          Audit Details:
          {{ range .Alerts }}
          - {{ .Annotations.output }}
          {{ end }}
          
          This is an informational audit log for compliance purposes.

# Inhibition rules to prevent alert spam
inhibit_rules:
  # Inhibit warning alerts when critical alerts are firing for the same container
  - source_match:
      priority: 'CRITICAL'
    target_match:
      priority: 'WARNING'
    equal: ['container']
  
  # Inhibit informational alerts when higher priority alerts are firing
  - source_match:
      priority: 'ALERT'
    target_match:
      priority: 'INFORMATIONAL'
    equal: ['container']
  
  # Inhibit duplicate emergency alerts
  - source_match:
      priority: 'EMERGENCY'
    target_match:
      priority: 'EMERGENCY'
    equal: ['rule', 'container']