FROM --platform=linux/amd64 python:3.12-alpine

# Build arguments for versioning
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION
ARG TARGETPLATFORM=linux/amd64

# Labels for Ubuntu deployment tracking
LABEL maintainer="AI Trading Bot Team" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0" \
      org.label-schema.platform="${TARGETPLATFORM}" \
      alpine.optimized="true" \
      alpine.compatible="3.18+" \
      deployment.service="bluefin-service" \
      deployment.monitoring="enabled"

# Alpine-optimized system dependencies
RUN apk add --no-cache \
    build-base \
    curl \
    git \
    ca-certificates \
    # Alpine networking tools
    netcat-openbsd \
    bind-tools \
    iputils \
    # Process monitoring tools
    procps \
    htop \
    # Development libraries
    libffi-dev \
    autoconf \
    automake \
    libtool \
    pkgconfig \
    # SSL/TLS support
    openssl

# Create flexible user setup for both named users and UID/GID mapping
# Support both built-in bluefin user and host user mapping via docker-compose
ARG USER_ID=1001
ARG GROUP_ID=1001
ARG USERNAME=bluefin

# Create group and user with configurable IDs - Handle UID conflicts gracefully
# Skip user creation if USER_ID is 0 (root) to avoid conflicts
RUN if [ "${USER_ID}" != "0" ]; then \
        # Create group if it doesn't already exist
        (addgroup -g ${GROUP_ID} ${USERNAME} || true) && \
        # Create user if it doesn't already exist
        (adduser -u ${USER_ID} -G ${USERNAME} -s /bin/sh -D ${USERNAME} || \
         echo "User with UID ${USER_ID} already exists, skipping creation"); \
    else \
        echo "Using root user (UID=0) - skipping user creation"; \
    fi

# Set working directory
WORKDIR /app

# Ubuntu-optimized Python dependencies installation
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir \
    python-dotenv \
    prometheus-client \
    psutil \
    requests \
    asyncio-throttle \
    tenacity \
    structlog \
    fastapi \
    uvicorn \
    aiofiles \
    pydantic \
    && pip cache purge

# Ubuntu-optimized dependency installation with better error handling
# Install compatible aiohttp version first to avoid compilation issues
RUN pip install --no-cache-dir aiohttp==3.9.5 || \
    (echo "aiohttp installation failed, trying alternative..." && pip install --no-cache-dir httpx[http2])

# Install Bluefin client with precompiled wheels preferred
RUN pip install --no-cache-dir bluefin-v2-client || \
    pip install --no-cache-dir --force-reinstall bluefin-v2-client || \
    pip install --no-cache-dir git+https://github.com/fireflyprotocol/bluefin-v2-client-python.git || \
    (echo "ERROR: All bluefin-v2-client installation methods failed" && exit 1)

# Copy service code (from services directory)
COPY services/bluefin_sdk_service.py /app/
COPY services/scripts/validate_env.py /app/

# Copy Docker entrypoint script (from services directory)
COPY services/docker-entrypoint-bluefin.sh /app/docker-entrypoint.sh
RUN chmod +x /app/docker-entrypoint.sh

# Create necessary directories with flexible permissions that work with both approaches
# Approach 1: Built-in user (default when no user mapping)
# Approach 2: Host user mapping (via docker-compose user directive)
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chmod 755 /app && \
    chmod 775 /app/logs /app/data /app/tmp && \
    # Set ownership conditionally - only if not running as root
    if [ "${USER_ID}" != "0" ]; then \
        chown -R ${USER_ID}:${GROUP_ID} /app; \
    else \
        echo "Running as root - skipping ownership change"; \
    fi && \
    # Also ensure group write permissions for flexibility
    chmod g+w /app /app/logs /app/data /app/tmp && \
    # Create fallback tmp directories that any user can write to
    mkdir -p /tmp/bluefin-logs /tmp/bluefin-data /tmp/bluefin-tmp && \
    chmod 777 /tmp/bluefin-logs /tmp/bluefin-data /tmp/bluefin-tmp

# Expose port
EXPOSE 8080

# Health check script (from services directory)
COPY services/healthcheck.sh /app/healthcheck.sh

RUN chmod +x /app/healthcheck.sh && \
    if [ "${USER_ID}" != "0" ]; then \
        chown ${USER_ID}:${GROUP_ID} /app/healthcheck.sh; \
    fi

# Ubuntu-optimized extended health check endpoint (from services directory)
COPY services/ubuntu-healthcheck.sh /app/ubuntu-healthcheck.sh

RUN chmod +x /app/ubuntu-healthcheck.sh && \
    if [ "${USER_ID}" != "0" ]; then \
        chown ${USER_ID}:${GROUP_ID} /app/ubuntu-healthcheck.sh; \
    fi

# Ubuntu-optimized environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONIOENCODING=utf-8 \
    BLUEFIN_SERVICE_RATE_LIMIT=50 \
    HOST=0.0.0.0 \
    PORT=8080 \
    LOG_LEVEL=info \
    UBUNTU_DEPLOYMENT=true \
    GEOGRAPHIC_REGION=US \
    CONNECTION_TIMEOUT=30 \
    READ_TIMEOUT=60 \
    RETRY_ATTEMPTS=5 \
    RETRY_BACKOFF=2 \
    PROXY_ENABLED=false

# Switch to appropriate user - stay as root if USER_ID=0, otherwise use created user
RUN if [ "${USER_ID}" != "0" ]; then \
        echo "Switching to user: ${USERNAME} (${USER_ID}:${GROUP_ID})"; \
    else \
        echo "Staying as root user for container execution"; \
    fi

# Use conditional USER directive - stay as root if USER_ID=0
USER ${USER_ID}:${GROUP_ID}

# Ubuntu-optimized health check configuration
HEALTHCHECK --interval=30s --timeout=15s --start-period=45s --retries=5 \
    CMD /app/healthcheck.sh || (echo "Health check failed on Ubuntu" && exit 1)

# Set entrypoint to initialization script
ENTRYPOINT ["/app/docker-entrypoint.sh"]

# Ubuntu-optimized service startup
CMD ["python", "-u", "-O", "bluefin_sdk_service.py"]
