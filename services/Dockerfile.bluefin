FROM python:3.10-slim

# Build arguments for versioning
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Labels for VPS deployment tracking
LABEL maintainer="AI Trading Bot Team" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0" \
      com.vps.service="bluefin-service" \
      com.vps.monitoring="enabled"

# Install system dependencies with VPS optimizations
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    ca-certificates \
    netcat-openbsd \
    dnsutils \
    iputils-ping \
    procps \
    htop \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r bluefin && useradd -r -g bluefin bluefin

# Set working directory
WORKDIR /app

# Install Bluefin SDK and dependencies with VPS optimizations
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir \
    bluefin-v2-client \
    aiohttp \
    python-dotenv \
    prometheus-client \
    psutil \
    requests \
    httpx[http2] \
    asyncio-throttle \
    tenacity \
    structlog

# Copy service code
COPY bluefin_sdk_service.py /app/
COPY scripts/validate_env.py /app/

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R bluefin:bluefin /app

# Expose port
EXPOSE 8080

# Health check script
COPY <<EOF /app/healthcheck.sh
#!/bin/bash
set -e

# Basic health check
curl -f --connect-timeout 10 --max-time 30 http://localhost:8080/health || exit 1

# VPS-specific checks
if [ "\$VPS_DEPLOYMENT" = "true" ]; then
    # Check disk space
    DISK_USAGE=\$(df /app | tail -1 | awk '{print \$5}' | sed 's/%//')
    if [ "\$DISK_USAGE" -gt 90 ]; then
        echo "Disk usage critical: \${DISK_USAGE}%"
        exit 1
    fi
    
    # Check memory usage
    MEM_USAGE=\$(free | grep Mem | awk '{printf("%.0f", \$3/\$2 * 100.0)}')
    if [ "\$MEM_USAGE" -gt 95 ]; then
        echo "Memory usage critical: \${MEM_USAGE}%"
        exit 1
    fi
fi

echo "Health check passed"
EOF

RUN chmod +x /app/healthcheck.sh && chown bluefin:bluefin /app/healthcheck.sh

# VPS health check endpoint
COPY <<EOF /app/vps-healthcheck.sh
#!/bin/bash
set -e

# Comprehensive VPS health check
echo "Starting VPS health check..."

# Service health
if ! curl -f --connect-timeout 5 http://localhost:8080/health > /dev/null 2>&1; then
    echo "Service health check failed"
    exit 1
fi

# Network connectivity check
if ! curl -f --connect-timeout 10 https://api.bluefin.io > /dev/null 2>&1; then
    echo "External network connectivity failed"
    exit 1
fi

# Check log directory permissions
if [ ! -w /app/logs ]; then
    echo "Log directory not writable"
    exit 1
fi

echo "VPS health check passed"
EOF

RUN chmod +x /app/vps-healthcheck.sh && chown bluefin:bluefin /app/vps-healthcheck.sh

# Set environment variables with VPS defaults
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    BLUEFIN_SERVICE_RATE_LIMIT=50 \
    HOST=0.0.0.0 \
    PORT=8080 \
    LOG_LEVEL=info \
    VPS_DEPLOYMENT=false \
    GEOGRAPHIC_REGION=US \
    CONNECTION_TIMEOUT=30 \
    READ_TIMEOUT=60 \
    RETRY_ATTEMPTS=5 \
    RETRY_BACKOFF=2 \
    PROXY_ENABLED=false

# Switch to non-root user
USER bluefin

# Health check configuration
HEALTHCHECK --interval=30s --timeout=15s --start-period=45s --retries=5 \
    CMD /app/healthcheck.sh

# Run the service with VPS optimizations
CMD ["python", "-u", "bluefin_sdk_service.py"]
