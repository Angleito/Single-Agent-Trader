FROM --platform=linux/amd64 python:3.12-slim

# Build arguments for versioning
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION
ARG TARGETPLATFORM=linux/amd64

# Labels for Ubuntu deployment tracking
LABEL maintainer="AI Trading Bot Team" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0" \
      org.label-schema.platform="${TARGETPLATFORM}" \
      ubuntu.optimized="true" \
      ubuntu.compatible="22.04+" \
      deployment.service="bluefin-service" \
      deployment.monitoring="enabled"

# Ubuntu-optimized system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    ca-certificates \
    # Ubuntu networking tools
    netcat-openbsd \
    dnsutils \
    iputils-ping \
    # Process monitoring tools
    procps \
    htop \
    # Development libraries
    libffi-dev \
    autotools-dev \
    automake \
    libtool \
    pkg-config \
    # SSL/TLS support
    openssl \
    # Ubuntu-specific optimizations
    software-properties-common \
    apt-transport-https \
    # Cleanup for smaller image size
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* /var/tmp/*

# Create flexible user setup for both named users and UID/GID mapping
# Support both built-in bluefin user and host user mapping via docker-compose
ARG USER_ID=1001
ARG GROUP_ID=1001
ARG USERNAME=bluefin

# Create group and user with configurable IDs - Handle UID conflicts gracefully
# Skip user creation if USER_ID is 0 (root) to avoid conflicts
RUN if [ "${USER_ID}" != "0" ]; then \
        # Create group if it doesn't already exist
        (groupadd -g ${GROUP_ID} ${USERNAME} || true) && \
        # Create user if it doesn't already exist
        (useradd -r -u ${USER_ID} -g ${GROUP_ID} -m -s /bin/bash ${USERNAME} || \
         echo "User with UID ${USER_ID} already exists, skipping creation"); \
    else \
        echo "Using root user (UID=0) - skipping user creation"; \
    fi

# Set working directory
WORKDIR /app

# Ubuntu-optimized Python dependencies installation
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir \
    python-dotenv \
    prometheus-client \
    psutil \
    requests \
    asyncio-throttle \
    tenacity \
    structlog \
    fastapi \
    uvicorn \
    aiofiles \
    pydantic \
    && pip cache purge

# Ubuntu-optimized dependency installation with better error handling
# Install compatible aiohttp version first to avoid compilation issues
RUN pip install --no-cache-dir aiohttp==3.9.5 || \
    (echo "aiohttp installation failed, trying alternative..." && pip install --no-cache-dir httpx[http2])

# Install Bluefin client with precompiled wheels preferred
RUN pip install --no-cache-dir bluefin-v2-client || \
    pip install --no-cache-dir --force-reinstall bluefin-v2-client || \
    pip install --no-cache-dir git+https://github.com/fireflyprotocol/bluefin-v2-client-python.git || \
    (echo "ERROR: All bluefin-v2-client installation methods failed" && exit 1)

# Copy service code
COPY bluefin_sdk_service.py /app/
COPY scripts/validate_env.py /app/

# Copy Docker entrypoint script
COPY docker-entrypoint-bluefin.sh /app/docker-entrypoint.sh
RUN chmod +x /app/docker-entrypoint.sh

# Create necessary directories with flexible permissions that work with both approaches
# Approach 1: Built-in user (default when no user mapping)
# Approach 2: Host user mapping (via docker-compose user directive)
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chmod 755 /app && \
    chmod 775 /app/logs /app/data /app/tmp && \
    # Set ownership conditionally - only if not running as root
    if [ "${USER_ID}" != "0" ]; then \
        chown -R ${USER_ID}:${GROUP_ID} /app; \
    else \
        echo "Running as root - skipping ownership change"; \
    fi && \
    # Also ensure group write permissions for flexibility
    chmod g+w /app /app/logs /app/data /app/tmp && \
    # Create fallback tmp directories that any user can write to
    mkdir -p /tmp/bluefin-logs /tmp/bluefin-data /tmp/bluefin-tmp && \
    chmod 777 /tmp/bluefin-logs /tmp/bluefin-data /tmp/bluefin-tmp

# Expose port
EXPOSE 8080

# Health check script
COPY <<EOF /app/healthcheck.sh
#!/bin/bash
set -e

# Basic health check
curl -f --connect-timeout 10 --max-time 30 http://localhost:8080/health || exit 1

# Ubuntu-specific resource checks
if [ "\$UBUNTU_DEPLOYMENT" = "true" ]; then
    # Check disk space with Ubuntu-compatible commands
    if command -v df >/dev/null 2>&1; then
        DISK_USAGE=\$(df /app 2>/dev/null | tail -1 | awk '{print \$5}' | sed 's/%//' || echo "0")
        if [ "\$DISK_USAGE" -gt 90 ]; then
            echo "Disk usage critical: \${DISK_USAGE}%"
            exit 1
        fi
    fi

    # Check memory usage with Ubuntu-compatible commands
    if command -v free >/dev/null 2>&1; then
        MEM_USAGE=\$(free 2>/dev/null | grep Mem | awk '{printf("%.0f", \$3/\$2 * 100.0)}' || echo "0")
        if [ "\$MEM_USAGE" -gt 95 ]; then
            echo "Memory usage critical: \${MEM_USAGE}%"
            exit 1
        fi
    fi
fi

echo "Health check passed"
EOF

RUN chmod +x /app/healthcheck.sh && \
    if [ "${USER_ID}" != "0" ]; then \
        chown ${USER_ID}:${GROUP_ID} /app/healthcheck.sh; \
    fi

# Ubuntu-optimized extended health check endpoint
COPY <<EOF /app/ubuntu-healthcheck.sh
#!/bin/bash
set -e

# Comprehensive Ubuntu health check
echo "Starting Ubuntu health check..."

# Service health with timeout
if ! timeout 10 curl -f --connect-timeout 5 http://localhost:8080/health > /dev/null 2>&1; then
    echo "Service health check failed"
    exit 1
fi

# Network connectivity check with Ubuntu DNS resolution
if command -v nslookup >/dev/null 2>&1; then
    if ! timeout 10 nslookup api.bluefin.io >/dev/null 2>&1; then
        echo "DNS resolution failed"
        exit 1
    fi
fi

# External connectivity check
if ! timeout 15 curl -f --connect-timeout 10 https://api.bluefin.io > /dev/null 2>&1; then
    echo "External network connectivity failed"
    exit 1
fi

# Check log directory permissions
if [ ! -w /app/logs ]; then
    echo "Log directory not writable"
    exit 1
fi

# Ubuntu-specific system checks
if [ -f /etc/os-release ]; then
    echo "Ubuntu system detected - performing additional checks"
fi

echo "Ubuntu health check passed"
EOF

RUN chmod +x /app/ubuntu-healthcheck.sh && \
    if [ "${USER_ID}" != "0" ]; then \
        chown ${USER_ID}:${GROUP_ID} /app/ubuntu-healthcheck.sh; \
    fi

# Ubuntu-optimized environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONIOENCODING=utf-8 \
    BLUEFIN_SERVICE_RATE_LIMIT=50 \
    HOST=0.0.0.0 \
    PORT=8080 \
    LOG_LEVEL=info \
    UBUNTU_DEPLOYMENT=true \
    GEOGRAPHIC_REGION=US \
    CONNECTION_TIMEOUT=30 \
    READ_TIMEOUT=60 \
    RETRY_ATTEMPTS=5 \
    RETRY_BACKOFF=2 \
    PROXY_ENABLED=false

# Switch to appropriate user - stay as root if USER_ID=0, otherwise use created user
RUN if [ "${USER_ID}" != "0" ]; then \
        echo "Switching to user: ${USERNAME} (${USER_ID}:${GROUP_ID})"; \
    else \
        echo "Staying as root user for container execution"; \
    fi

# Use conditional USER directive - stay as root if USER_ID=0
USER ${USER_ID}:${GROUP_ID}

# Ubuntu-optimized health check configuration
HEALTHCHECK --interval=30s --timeout=15s --start-period=45s --retries=5 \
    CMD /app/healthcheck.sh || (echo "Health check failed on Ubuntu" && exit 1)

# Set entrypoint to initialization script
ENTRYPOINT ["/app/docker-entrypoint.sh"]

# Ubuntu-optimized service startup
CMD ["python", "-u", "-O", "bluefin_sdk_service.py"]
