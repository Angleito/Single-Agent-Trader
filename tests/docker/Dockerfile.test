# Test Environment Dockerfile for Orderbook Testing
# 
# This Dockerfile creates a comprehensive testing environment for orderbook functionality
# including all necessary testing dependencies, tools, and optimizations.
#
# Build: docker build -t orderbook-test-runner -f tests/docker/Dockerfile.test .
# Run: docker run --rm -v $(pwd):/app orderbook-test-runner pytest tests/

ARG PYTHON_VERSION=3.12
FROM python:${PYTHON_VERSION}-slim-bullseye

# Build arguments
ARG USER_ID=1000
ARG GROUP_ID=1000
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=test

# Metadata
LABEL maintainer="AI Trading Bot Team"
LABEL version="${VERSION}"
LABEL build-date="${BUILD_DATE}"
LABEL vcs-ref="${VCS_REF}"
LABEL description="Comprehensive test environment for orderbook functionality"
LABEL test-suite="orderbook"

# =============================================================================
# SYSTEM DEPENDENCIES AND SECURITY
# =============================================================================

# Install system dependencies for testing
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build tools
    build-essential \
    gcc \
    g++ \
    make \
    # System utilities
    curl \
    wget \
    git \
    ca-certificates \
    # Network tools for testing
    netcat \
    telnet \
    iproute2 \
    # Database clients for integration testing
    postgresql-client \
    redis-tools \
    # Performance monitoring
    htop \
    iotop \
    nethogs \
    # JSON processing
    jq \
    # Debugging tools
    strace \
    gdb \
    valgrind \
    # Memory profiling
    massif-visualizer \
    # Security scanning
    clamav \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# =============================================================================
# PYTHON ENVIRONMENT SETUP
# =============================================================================

# Upgrade pip and install wheel
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Install testing framework and core dependencies
COPY tests/requirements-test.txt /tmp/requirements-test.txt
RUN pip install --no-cache-dir -r /tmp/requirements-test.txt

# Install additional testing tools
RUN pip install --no-cache-dir \
    # Core testing framework
    pytest==7.4.3 \
    pytest-asyncio==0.21.1 \
    pytest-cov==4.1.0 \
    pytest-benchmark==4.0.0 \
    pytest-xdist==3.3.1 \
    pytest-mock==3.11.1 \
    pytest-timeout==2.1.0 \
    pytest-html==4.1.1 \
    pytest-json-report==1.5.0 \
    # Property-based testing
    hypothesis==6.88.1 \
    hypothesis-pytest==0.19.0 \
    # Performance testing
    pytest-profiling==1.7.0 \
    memory-profiler==0.61.0 \
    psutil==5.9.6 \
    # Load testing
    locust==2.17.0 \
    # Mock and testing utilities
    responses==0.24.1 \
    httpx==0.25.2 \
    websockets==12.0 \
    # Database testing
    pytest-postgresql==5.0.0 \
    pytest-redis==3.0.2 \
    # Code quality and analysis
    pytest-flake8==1.1.1 \
    pytest-mypy==0.10.3 \
    pytest-black==0.3.12 \
    pytest-isort==3.1.0 \
    # Coverage and reporting
    coverage[toml]==7.3.2 \
    pytest-cov==4.1.0 \
    # Container testing
    testcontainers==3.7.1 \
    docker==6.1.3 \
    # Visualization and reporting
    matplotlib==3.8.2 \
    seaborn==0.13.0 \
    plotly==5.17.0

# =============================================================================
# USER SETUP
# =============================================================================

# Create test user with same UID/GID as host user
RUN groupadd -g ${GROUP_ID} testuser && \
    useradd -u ${USER_ID} -g ${GROUP_ID} -m -s /bin/bash testuser && \
    # Give test user sudo access for debugging
    apt-get update && apt-get install -y sudo && \
    echo "testuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
    rm -rf /var/lib/apt/lists/*

# =============================================================================
# APPLICATION SETUP
# =============================================================================

# Set working directory
WORKDIR /app

# Create necessary directories with proper permissions
RUN mkdir -p \
    /app/test-results \
    /app/test-reports \
    /app/coverage \
    /app/logs \
    /app/data \
    /app/.pytest_cache \
    /app/tmp \
    && chown -R testuser:testuser /app

# Copy test configuration files
COPY tests/docker/config/ /app/test-config/
COPY tests/conftest.py /app/tests/conftest.py
COPY pytest.ini /app/pytest.ini

# =============================================================================
# TESTING TOOLS AND SCRIPTS
# =============================================================================

# Copy test execution scripts
COPY tests/docker/scripts/ /app/test-scripts/
RUN chmod +x /app/test-scripts/*.sh && \
    chown -R testuser:testuser /app/test-scripts

# Install custom testing utilities
COPY tests/docker/utils/ /app/test-utils/
RUN pip install --no-cache-dir -e /app/test-utils/

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================

# Switch to test user
USER testuser

# Set environment variables for testing
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTEST_CURRENT_TEST= \
    TEST_MODE=true \
    LOG_LEVEL=DEBUG \
    # Testing framework configuration
    PYTEST_WORKERS=auto \
    PYTEST_TIMEOUT=300 \
    COVERAGE_PROCESS_START=/app/pyproject.toml \
    # Performance testing
    BENCHMARK_SKIP=false \
    BENCHMARK_SORT=mean \
    BENCHMARK_MIN_ROUNDS=5 \
    # Memory profiling
    MEMORY_PROFILER_BACKEND=psutil \
    # Hypothesis configuration
    HYPOTHESIS_PROFILE=dev \
    HYPOTHESIS_VERBOSITY=normal \
    # Container-specific
    CONTAINER_ENV=test \
    TEST_CONTAINER=true

# =============================================================================
# HEALTH CHECK AND VALIDATION
# =============================================================================

# Add health check script
COPY tests/docker/scripts/healthcheck.sh /app/healthcheck.sh
RUN chmod +x /app/healthcheck.sh

# Validate test environment
RUN python -c "import pytest, hypothesis, psutil, docker; print('Test environment validated successfully')"

# =============================================================================
# TEST EXECUTION CONFIGURATION
# =============================================================================

# Set default test command
CMD ["python", "-m", "pytest", "tests/", "-v", "--tb=short", "--cov=/app/bot", "--cov-report=html:/app/test-results/coverage"]

# Alternative entry points for different test types
LABEL test.unit="python -m pytest tests/unit/ -v"
LABEL test.integration="python -m pytest tests/integration/ -v"
LABEL test.performance="python -m pytest tests/performance/ -v --benchmark-only"
LABEL test.property="python -m pytest tests/property/ -v"
LABEL test.stress="python -m pytest tests/stress/ -v"
LABEL test.orderbook="python -m pytest tests/ -k orderbook -v"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /app/healthcheck.sh

# =============================================================================
# SECURITY AND OPTIMIZATION
# =============================================================================

# Security hardening
RUN echo "testuser:*:19000:0:99999:7:::" >> /etc/shadow

# Optimize Python bytecode compilation
RUN python -m compileall /usr/local/lib/python*/site-packages/ || true

# Clear package manager cache
USER root
RUN apt-get autoremove -y && \
    apt-get autoclean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Switch back to test user
USER testuser

# Set final working directory
WORKDIR /app