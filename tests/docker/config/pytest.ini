# Pytest configuration for orderbook testing
[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers
markers =
    unit: Unit tests
    integration: Integration tests
    performance: Performance tests
    stress: Stress tests
    property: Property-based tests
    orderbook: Orderbook-specific tests
    slow: Slow running tests
    external: Tests requiring external services
    docker: Tests requiring Docker

# Output options
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --capture=no
    --durations=10
    --showlocals
    --disable-warnings

# Coverage configuration
[coverage:run]
source = bot
omit =
    */tests/*
    */venv/*
    */migrations/*
    */__pycache__/*
    */site-packages/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Test timeout
timeout = 300
timeout_method = thread

# Asyncio configuration
asyncio_mode = auto

# Logging configuration
log_cli = true
log_cli_level = DEBUG
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Performance testing
benchmark_min_rounds = 5
benchmark_max_time = 2.0
benchmark_warmup = true
benchmark_disable_gc = false
benchmark_sort = mean

# Property-based testing (Hypothesis)
hypothesis_verbosity = normal
hypothesis_show_statistics = true
hypothesis_profile = dev
